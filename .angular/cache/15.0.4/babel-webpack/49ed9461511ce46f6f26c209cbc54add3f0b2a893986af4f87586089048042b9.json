{"ast":null,"code":"import { Observable } from '../../Observable';\nimport { performanceTimestampProvider } from '../../scheduler/performanceTimestampProvider';\nimport { animationFrameProvider } from '../../scheduler/animationFrameProvider';\nexport function animationFrames(timestampProvider) {\n  return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;\n}\nfunction animationFramesFactory(timestampProvider) {\n  return new Observable(subscriber => {\n    const provider = timestampProvider || performanceTimestampProvider;\n    const start = provider.now();\n    let id = 0;\n    const run = () => {\n      if (!subscriber.closed) {\n        id = animationFrameProvider.requestAnimationFrame(timestamp => {\n          id = 0;\n          const now = provider.now();\n          subscriber.next({\n            timestamp: timestampProvider ? now : timestamp,\n            elapsed: now - start\n          });\n          run();\n        });\n      }\n    };\n    run();\n    return () => {\n      if (id) {\n        animationFrameProvider.cancelAnimationFrame(id);\n      }\n    };\n  });\n}\nconst DEFAULT_ANIMATION_FRAMES = animationFramesFactory();","map":{"version":3,"names":["Observable","performanceTimestampProvider","animationFrameProvider","animationFrames","timestampProvider","animationFramesFactory","DEFAULT_ANIMATION_FRAMES","subscriber","provider","start","now","id","run","closed","requestAnimationFrame","timestamp","next","elapsed","cancelAnimationFrame"],"sources":["C:/Users/Noril/Documents/team3990/node_modules/rxjs/dist/esm/internal/observable/dom/animationFrames.js"],"sourcesContent":["import { Observable } from '../../Observable';\r\nimport { performanceTimestampProvider } from '../../scheduler/performanceTimestampProvider';\r\nimport { animationFrameProvider } from '../../scheduler/animationFrameProvider';\r\nexport function animationFrames(timestampProvider) {\r\n    return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;\r\n}\r\nfunction animationFramesFactory(timestampProvider) {\r\n    return new Observable((subscriber) => {\r\n        const provider = timestampProvider || performanceTimestampProvider;\r\n        const start = provider.now();\r\n        let id = 0;\r\n        const run = () => {\r\n            if (!subscriber.closed) {\r\n                id = animationFrameProvider.requestAnimationFrame((timestamp) => {\r\n                    id = 0;\r\n                    const now = provider.now();\r\n                    subscriber.next({\r\n                        timestamp: timestampProvider ? now : timestamp,\r\n                        elapsed: now - start,\r\n                    });\r\n                    run();\r\n                });\r\n            }\r\n        };\r\n        run();\r\n        return () => {\r\n            if (id) {\r\n                animationFrameProvider.cancelAnimationFrame(id);\r\n            }\r\n        };\r\n    });\r\n}\r\nconst DEFAULT_ANIMATION_FRAMES = animationFramesFactory();\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,4BAA4B,QAAQ,8CAA8C;AAC3F,SAASC,sBAAsB,QAAQ,wCAAwC;AAC/E,OAAO,SAASC,eAAe,CAACC,iBAAiB,EAAE;EAC/C,OAAOA,iBAAiB,GAAGC,sBAAsB,CAACD,iBAAiB,CAAC,GAAGE,wBAAwB;AACnG;AACA,SAASD,sBAAsB,CAACD,iBAAiB,EAAE;EAC/C,OAAO,IAAIJ,UAAU,CAAEO,UAAU,IAAK;IAClC,MAAMC,QAAQ,GAAGJ,iBAAiB,IAAIH,4BAA4B;IAClE,MAAMQ,KAAK,GAAGD,QAAQ,CAACE,GAAG,EAAE;IAC5B,IAAIC,EAAE,GAAG,CAAC;IACV,MAAMC,GAAG,GAAG,MAAM;MACd,IAAI,CAACL,UAAU,CAACM,MAAM,EAAE;QACpBF,EAAE,GAAGT,sBAAsB,CAACY,qBAAqB,CAAEC,SAAS,IAAK;UAC7DJ,EAAE,GAAG,CAAC;UACN,MAAMD,GAAG,GAAGF,QAAQ,CAACE,GAAG,EAAE;UAC1BH,UAAU,CAACS,IAAI,CAAC;YACZD,SAAS,EAAEX,iBAAiB,GAAGM,GAAG,GAAGK,SAAS;YAC9CE,OAAO,EAAEP,GAAG,GAAGD;UACnB,CAAC,CAAC;UACFG,GAAG,EAAE;QACT,CAAC,CAAC;MACN;IACJ,CAAC;IACDA,GAAG,EAAE;IACL,OAAO,MAAM;MACT,IAAID,EAAE,EAAE;QACJT,sBAAsB,CAACgB,oBAAoB,CAACP,EAAE,CAAC;MACnD;IACJ,CAAC;EACL,CAAC,CAAC;AACN;AACA,MAAML,wBAAwB,GAAGD,sBAAsB,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}