{"ast":null,"code":"import { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\nexport class Subject extends Observable {\n  constructor() {\n    super();\n    this.closed = false;\n    this.currentObservers = null;\n    this.observers = [];\n    this.isStopped = false;\n    this.hasError = false;\n    this.thrownError = null;\n  }\n  lift(operator) {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return subject;\n  }\n  _throwIfClosed() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  }\n  next(value) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        if (!this.currentObservers) {\n          this.currentObservers = Array.from(this.observers);\n        }\n        for (const observer of this.currentObservers) {\n          observer.next(value);\n        }\n      }\n    });\n  }\n  error(err) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.hasError = this.isStopped = true;\n        this.thrownError = err;\n        const {\n          observers\n        } = this;\n        while (observers.length) {\n          observers.shift().error(err);\n        }\n      }\n    });\n  }\n  complete() {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.isStopped = true;\n        const {\n          observers\n        } = this;\n        while (observers.length) {\n          observers.shift().complete();\n        }\n      }\n    });\n  }\n  unsubscribe() {\n    this.isStopped = this.closed = true;\n    this.observers = this.currentObservers = null;\n  }\n  get observed() {\n    var _a;\n    return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n  }\n  _trySubscribe(subscriber) {\n    this._throwIfClosed();\n    return super._trySubscribe(subscriber);\n  }\n  _subscribe(subscriber) {\n    this._throwIfClosed();\n    this._checkFinalizedStatuses(subscriber);\n    return this._innerSubscribe(subscriber);\n  }\n  _innerSubscribe(subscriber) {\n    const {\n      hasError,\n      isStopped,\n      observers\n    } = this;\n    if (hasError || isStopped) {\n      return EMPTY_SUBSCRIPTION;\n    }\n    this.currentObservers = null;\n    observers.push(subscriber);\n    return new Subscription(() => {\n      this.currentObservers = null;\n      arrRemove(observers, subscriber);\n    });\n  }\n  _checkFinalizedStatuses(subscriber) {\n    const {\n      hasError,\n      thrownError,\n      isStopped\n    } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  }\n  asObservable() {\n    const observable = new Observable();\n    observable.source = this;\n    return observable;\n  }\n}\nSubject.create = (destination, source) => {\n  return new AnonymousSubject(destination, source);\n};\nexport class AnonymousSubject extends Subject {\n  constructor(destination, source) {\n    super();\n    this.destination = destination;\n    this.source = source;\n  }\n  next(value) {\n    var _a, _b;\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n  }\n  error(err) {\n    var _a, _b;\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n  }\n  complete() {\n    var _a, _b;\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n  }\n  _subscribe(subscriber) {\n    var _a, _b;\n    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n  }\n}","map":{"version":3,"names":["Observable","Subscription","EMPTY_SUBSCRIPTION","ObjectUnsubscribedError","arrRemove","errorContext","Subject","constructor","closed","currentObservers","observers","isStopped","hasError","thrownError","lift","operator","subject","AnonymousSubject","_throwIfClosed","next","value","Array","from","observer","error","err","length","shift","complete","unsubscribe","observed","_a","_trySubscribe","subscriber","_subscribe","_checkFinalizedStatuses","_innerSubscribe","push","asObservable","observable","source","create","destination","_b","call","subscribe"],"sources":["C:/Users/Noril/Documents/team3990/node_modules/rxjs/dist/esm/internal/Subject.js"],"sourcesContent":["import { Observable } from './Observable';\r\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\r\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\r\nimport { arrRemove } from './util/arrRemove';\r\nimport { errorContext } from './util/errorContext';\r\nexport class Subject extends Observable {\r\n    constructor() {\r\n        super();\r\n        this.closed = false;\r\n        this.currentObservers = null;\r\n        this.observers = [];\r\n        this.isStopped = false;\r\n        this.hasError = false;\r\n        this.thrownError = null;\r\n    }\r\n    lift(operator) {\r\n        const subject = new AnonymousSubject(this, this);\r\n        subject.operator = operator;\r\n        return subject;\r\n    }\r\n    _throwIfClosed() {\r\n        if (this.closed) {\r\n            throw new ObjectUnsubscribedError();\r\n        }\r\n    }\r\n    next(value) {\r\n        errorContext(() => {\r\n            this._throwIfClosed();\r\n            if (!this.isStopped) {\r\n                if (!this.currentObservers) {\r\n                    this.currentObservers = Array.from(this.observers);\r\n                }\r\n                for (const observer of this.currentObservers) {\r\n                    observer.next(value);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    error(err) {\r\n        errorContext(() => {\r\n            this._throwIfClosed();\r\n            if (!this.isStopped) {\r\n                this.hasError = this.isStopped = true;\r\n                this.thrownError = err;\r\n                const { observers } = this;\r\n                while (observers.length) {\r\n                    observers.shift().error(err);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    complete() {\r\n        errorContext(() => {\r\n            this._throwIfClosed();\r\n            if (!this.isStopped) {\r\n                this.isStopped = true;\r\n                const { observers } = this;\r\n                while (observers.length) {\r\n                    observers.shift().complete();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    unsubscribe() {\r\n        this.isStopped = this.closed = true;\r\n        this.observers = this.currentObservers = null;\r\n    }\r\n    get observed() {\r\n        var _a;\r\n        return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\r\n    }\r\n    _trySubscribe(subscriber) {\r\n        this._throwIfClosed();\r\n        return super._trySubscribe(subscriber);\r\n    }\r\n    _subscribe(subscriber) {\r\n        this._throwIfClosed();\r\n        this._checkFinalizedStatuses(subscriber);\r\n        return this._innerSubscribe(subscriber);\r\n    }\r\n    _innerSubscribe(subscriber) {\r\n        const { hasError, isStopped, observers } = this;\r\n        if (hasError || isStopped) {\r\n            return EMPTY_SUBSCRIPTION;\r\n        }\r\n        this.currentObservers = null;\r\n        observers.push(subscriber);\r\n        return new Subscription(() => {\r\n            this.currentObservers = null;\r\n            arrRemove(observers, subscriber);\r\n        });\r\n    }\r\n    _checkFinalizedStatuses(subscriber) {\r\n        const { hasError, thrownError, isStopped } = this;\r\n        if (hasError) {\r\n            subscriber.error(thrownError);\r\n        }\r\n        else if (isStopped) {\r\n            subscriber.complete();\r\n        }\r\n    }\r\n    asObservable() {\r\n        const observable = new Observable();\r\n        observable.source = this;\r\n        return observable;\r\n    }\r\n}\r\nSubject.create = (destination, source) => {\r\n    return new AnonymousSubject(destination, source);\r\n};\r\nexport class AnonymousSubject extends Subject {\r\n    constructor(destination, source) {\r\n        super();\r\n        this.destination = destination;\r\n        this.source = source;\r\n    }\r\n    next(value) {\r\n        var _a, _b;\r\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\r\n    }\r\n    error(err) {\r\n        var _a, _b;\r\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\r\n    }\r\n    complete() {\r\n        var _a, _b;\r\n        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n    }\r\n    _subscribe(subscriber) {\r\n        var _a, _b;\r\n        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}