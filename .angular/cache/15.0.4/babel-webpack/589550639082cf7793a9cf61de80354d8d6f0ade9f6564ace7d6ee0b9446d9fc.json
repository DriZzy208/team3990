{"ast":null,"code":"/**\r\n * @license Angular v15.0.4\r\n * (c) 2010-2022 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\n\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ÉµparseCookieValue, XhrFactory as XhrFactory$1 } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, inject, Inject, PLATFORM_ID, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\r\n * `HttpResponse`.\r\n *\r\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\r\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\r\n * `HttpBackend`.\r\n *\r\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\r\n *\r\n * @publicApi\r\n */\nclass HttpHandler {}\n/**\r\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\r\n *\r\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\r\n *\r\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\r\n * through the interceptor chain.\r\n *\r\n * @publicApi\r\n */\nclass HttpBackend {}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Represents the header configuration options for an HTTP request.\r\n * Instances are immutable. Modifying methods return a cloned\r\n * instance with the change. The original object is never changed.\r\n *\r\n * @publicApi\r\n */\nclass HttpHeaders {\n  /**  Constructs a new HTTP header object with the given values.*/\n  constructor(headers) {\n    /**\r\n     * Internal map of lowercased header names to the normalized\r\n     * form of the name (the form seen first).\r\n     */\n    this.normalizedNames = new Map();\n    /**\r\n     * Queued updates to be materialized the next initialization.\r\n     */\n    this.lazyUpdate = null;\n    if (!headers) {\n      this.headers = new Map();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const key = name.toLowerCase();\n            const value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n            if (this.headers.has(key)) {\n              this.headers.get(key).push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit = () => {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          assertValidHeaders(headers);\n        }\n        this.headers = new Map();\n        Object.keys(headers).forEach(name => {\n          let values = headers[name];\n          const key = name.toLowerCase();\n          if (typeof values === 'string') {\n            values = [values];\n          }\n          if (values.length > 0) {\n            this.headers.set(key, values);\n            this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n  /**\r\n   * Checks for existence of a given header.\r\n   *\r\n   * @param name The header name to check for existence.\r\n   *\r\n   * @returns True if the header exists, false otherwise.\r\n   */\n  has(name) {\n    this.init();\n    return this.headers.has(name.toLowerCase());\n  }\n  /**\r\n   * Retrieves the first value of a given header.\r\n   *\r\n   * @param name The header name.\r\n   *\r\n   * @returns The value string if the header exists, null otherwise\r\n   */\n  get(name) {\n    this.init();\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n  /**\r\n   * Retrieves the names of the headers.\r\n   *\r\n   * @returns A list of header names.\r\n   */\n  keys() {\n    this.init();\n    return Array.from(this.normalizedNames.values());\n  }\n  /**\r\n   * Retrieves a list of values for a given header.\r\n   *\r\n   * @param name The header name from which to retrieve values.\r\n   *\r\n   * @returns A string of values if the header exists, null otherwise.\r\n   */\n  getAll(name) {\n    this.init();\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n  /**\r\n   * Appends a new value to the existing set of values for a header\r\n   * and returns them in a clone of the original instance.\r\n   *\r\n   * @param name The header name for which to append the values.\r\n   * @param value The value to append.\r\n   *\r\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\r\n   */\n  append(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 'a'\n    });\n  }\n  /**\r\n   * Sets or modifies a value for a given header in a clone of the original instance.\r\n   * If the header already exists, its value is replaced with the given value\r\n   * in the returned object.\r\n   *\r\n   * @param name The header name.\r\n   * @param value The value or values to set or override for the given header.\r\n   *\r\n   * @returns A clone of the HTTP headers object with the newly set header value.\r\n   */\n  set(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 's'\n    });\n  }\n  /**\r\n   * Deletes values for a given header in a clone of the original instance.\r\n   *\r\n   * @param name The header name.\r\n   * @param value The value or values to delete for the given header.\r\n   *\r\n   * @returns A clone of the HTTP headers object with the given value deleted.\r\n   */\n  delete(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 'd'\n    });\n  }\n  maybeSetNormalizedName(name, lcName) {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n  init() {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n  copyFrom(other) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key));\n      this.normalizedNames.set(key, other.normalizedNames.get(key));\n    });\n  }\n  clone(update) {\n    const clone = new HttpHeaders();\n    clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n  applyUpdate(update) {\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const toDelete = update.value;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n  /**\r\n   * @internal\r\n   */\n  forEach(fn) {\n    this.init();\n    Array.from(this.normalizedNames.keys()).forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n  }\n}\n/**\r\n * Verifies that the headers object has the right shape: the values\r\n * must be either strings or arrays. Throws an error if an invalid\r\n * header value is present.\r\n */\nfunction assertValidHeaders(headers) {\n  for (const [key, value] of Object.entries(headers)) {\n    if (typeof value !== 'string' && !Array.isArray(value)) {\n      throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` + `Expecting either a string or an array, but got: \\`${value}\\`.`);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Provides encoding and decoding of URL parameter and query-string values.\r\n *\r\n * Serializes and parses URL parameter keys and values to encode and decode them.\r\n * If you pass URL query parameters without encoding,\r\n * the query parameters can be misinterpreted at the receiving end.\r\n *\r\n *\r\n * @publicApi\r\n */\nclass HttpUrlEncodingCodec {\n  /**\r\n   * Encodes a key name for a URL parameter or query-string.\r\n   * @param key The key name.\r\n   * @returns The encoded key name.\r\n   */\n  encodeKey(key) {\n    return standardEncoding(key);\n  }\n  /**\r\n   * Encodes the value of a URL parameter or query-string.\r\n   * @param value The value.\r\n   * @returns The encoded value.\r\n   */\n  encodeValue(value) {\n    return standardEncoding(value);\n  }\n  /**\r\n   * Decodes an encoded URL parameter or query-string key.\r\n   * @param key The encoded key name.\r\n   * @returns The decoded key name.\r\n   */\n  decodeKey(key) {\n    return decodeURIComponent(key);\n  }\n  /**\r\n   * Decodes an encoded URL parameter or query-string value.\r\n   * @param value The encoded value.\r\n   * @returns The decoded value.\r\n   */\n  decodeValue(value) {\n    return decodeURIComponent(value);\n  }\n}\nfunction paramParser(rawParams, codec) {\n  const map = new Map();\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    const params = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach(param => {\n      const eqIdx = param.indexOf('=');\n      const [key, val] = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\r\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\r\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n  '40': '@',\n  '3A': ':',\n  '24': '$',\n  '2C': ',',\n  '3B': ';',\n  '3D': '=',\n  '3F': '?',\n  '2F': '/'\n};\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\nfunction valueToString(value) {\n  return `${value}`;\n}\n/**\r\n * An HTTP request/response body that represents serialized parameters,\r\n * per the MIME type `application/x-www-form-urlencoded`.\r\n *\r\n * This class is immutable; all mutation operations return a new instance.\r\n *\r\n * @publicApi\r\n */\nclass HttpParams {\n  constructor(options = {}) {\n    this.updates = null;\n    this.cloneFrom = null;\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(`Cannot specify both fromString and fromObject.`);\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map();\n      Object.keys(options.fromObject).forEach(key => {\n        const value = options.fromObject[key];\n        // convert the values to strings\n        const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n        this.map.set(key, values);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n  /**\r\n   * Reports whether the body includes one or more values for a given parameter.\r\n   * @param param The parameter name.\r\n   * @returns True if the parameter has one or more values,\r\n   * false if it has no value or is not present.\r\n   */\n  has(param) {\n    this.init();\n    return this.map.has(param);\n  }\n  /**\r\n   * Retrieves the first value for a parameter.\r\n   * @param param The parameter name.\r\n   * @returns The first value of the given parameter,\r\n   * or `null` if the parameter is not present.\r\n   */\n  get(param) {\n    this.init();\n    const res = this.map.get(param);\n    return !!res ? res[0] : null;\n  }\n  /**\r\n   * Retrieves all values for a  parameter.\r\n   * @param param The parameter name.\r\n   * @returns All values in a string array,\r\n   * or `null` if the parameter not present.\r\n   */\n  getAll(param) {\n    this.init();\n    return this.map.get(param) || null;\n  }\n  /**\r\n   * Retrieves all the parameters for this body.\r\n   * @returns The parameter names in a string array.\r\n   */\n  keys() {\n    this.init();\n    return Array.from(this.map.keys());\n  }\n  /**\r\n   * Appends a new value to existing values for a parameter.\r\n   * @param param The parameter name.\r\n   * @param value The new value to add.\r\n   * @return A new body with the appended value.\r\n   */\n  append(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 'a'\n    });\n  }\n  /**\r\n   * Constructs a new body with appended values for the given parameter name.\r\n   * @param params parameters and values\r\n   * @return A new body with the new value.\r\n   */\n  appendAll(params) {\n    const updates = [];\n    Object.keys(params).forEach(param => {\n      const value = params[param];\n      if (Array.isArray(value)) {\n        value.forEach(_value => {\n          updates.push({\n            param,\n            value: _value,\n            op: 'a'\n          });\n        });\n      } else {\n        updates.push({\n          param,\n          value: value,\n          op: 'a'\n        });\n      }\n    });\n    return this.clone(updates);\n  }\n  /**\r\n   * Replaces the value for a parameter.\r\n   * @param param The parameter name.\r\n   * @param value The new value.\r\n   * @return A new body with the new value.\r\n   */\n  set(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 's'\n    });\n  }\n  /**\r\n   * Removes a given value or all values from a parameter.\r\n   * @param param The parameter name.\r\n   * @param value The value to remove, if provided.\r\n   * @return A new body with the given value removed, or with all values\r\n   * removed if no value is specified.\r\n   */\n  delete(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 'd'\n    });\n  }\n  /**\r\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\r\n   * separated by `&`s.\r\n   */\n  toString() {\n    this.init();\n    return this.keys().map(key => {\n      const eKey = this.encoder.encodeKey(key);\n      // `a: ['1']` produces `'a=1'`\n      // `b: []` produces `''`\n      // `c: ['1', '2']` produces `'c=1&c=2'`\n      return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value)).join('&');\n    })\n    // filter out empty values because `b: []` produces `''`\n    // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n    .filter(param => param !== '').join('&');\n  }\n  clone(update) {\n    const clone = new HttpParams({\n      encoder: this.encoder\n    });\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat(update);\n    return clone;\n  }\n  init() {\n    if (this.map === null) {\n      this.map = new Map();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n      this.updates.forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n            base.push(valueToString(update.value));\n            this.map.set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map.get(update.param) || [];\n              const idx = base.indexOf(valueToString(update.value));\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) {\n                this.map.set(update.param, base);\n              } else {\n                this.map.delete(update.param);\n              }\n            } else {\n              this.map.delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * A token used to manipulate and access values stored in `HttpContext`.\r\n *\r\n * @publicApi\r\n */\nclass HttpContextToken {\n  constructor(defaultValue) {\n    this.defaultValue = defaultValue;\n  }\n}\n/**\r\n * Http context stores arbitrary user defined values and ensures type safety without\r\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\r\n *\r\n * This context is mutable and is shared between cloned requests unless explicitly specified.\r\n *\r\n * @usageNotes\r\n *\r\n * ### Usage Example\r\n *\r\n * ```typescript\r\n * // inside cache.interceptors.ts\r\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\r\n *\r\n * export class CacheInterceptor implements HttpInterceptor {\r\n *\r\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\r\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\r\n *       return ...;\r\n *     }\r\n *     return delegate.handle(req);\r\n *   }\r\n * }\r\n *\r\n * // inside a service\r\n *\r\n * this.httpClient.get('/api/weather', {\r\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\r\n * }).subscribe(...);\r\n * ```\r\n *\r\n * @publicApi\r\n */\nclass HttpContext {\n  constructor() {\n    this.map = new Map();\n  }\n  /**\r\n   * Store a value in the context. If a value is already present it will be overwritten.\r\n   *\r\n   * @param token The reference to an instance of `HttpContextToken`.\r\n   * @param value The value to store.\r\n   *\r\n   * @returns A reference to itself for easy chaining.\r\n   */\n  set(token, value) {\n    this.map.set(token, value);\n    return this;\n  }\n  /**\r\n   * Retrieve the value associated with the given token.\r\n   *\r\n   * @param token The reference to an instance of `HttpContextToken`.\r\n   *\r\n   * @returns The stored value or default if one is defined.\r\n   */\n  get(token) {\n    if (!this.map.has(token)) {\n      this.map.set(token, token.defaultValue());\n    }\n    return this.map.get(token);\n  }\n  /**\r\n   * Delete the value associated with the given token.\r\n   *\r\n   * @param token The reference to an instance of `HttpContextToken`.\r\n   *\r\n   * @returns A reference to itself for easy chaining.\r\n   */\n  delete(token) {\n    this.map.delete(token);\n    return this;\n  }\n  /**\r\n   * Checks for existence of a given token.\r\n   *\r\n   * @param token The reference to an instance of `HttpContextToken`.\r\n   *\r\n   * @returns True if the token exists, false otherwise.\r\n   */\n  has(token) {\n    return this.map.has(token);\n  }\n  /**\r\n   * @returns a list of tokens currently stored in the context.\r\n   */\n  keys() {\n    return this.map.keys();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Determine whether the given HTTP method may include a body.\r\n */\nfunction mightHaveBody(method) {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n/**\r\n * Safely assert whether the given value is an ArrayBuffer.\r\n *\r\n * In some execution environments ArrayBuffer is not defined.\r\n */\nfunction isArrayBuffer(value) {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\r\n * Safely assert whether the given value is a Blob.\r\n *\r\n * In some execution environments Blob is not defined.\r\n */\nfunction isBlob(value) {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\r\n * Safely assert whether the given value is a FormData instance.\r\n *\r\n * In some execution environments FormData is not defined.\r\n */\nfunction isFormData(value) {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\r\n * Safely assert whether the given value is a URLSearchParams instance.\r\n *\r\n * In some execution environments URLSearchParams is not defined.\r\n */\nfunction isUrlSearchParams(value) {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\r\n * An outgoing HTTP request with an optional typed body.\r\n *\r\n * `HttpRequest` represents an outgoing request, including URL, method,\r\n * headers, body, and other request configuration options. Instances should be\r\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\r\n * method should be used.\r\n *\r\n * @publicApi\r\n */\nclass HttpRequest {\n  constructor(method, url, third, fourth) {\n    this.url = url;\n    /**\r\n     * The request body, or `null` if one isn't set.\r\n     *\r\n     * Bodies are not enforced to be immutable, as they can include a reference to any\r\n     * user-defined data type. However, interceptors should take care to preserve\r\n     * idempotence by treating them as such.\r\n     */\n    this.body = null;\n    /**\r\n     * Whether this request should be made in a way that exposes progress events.\r\n     *\r\n     * Progress events are expensive (change detection runs on each event) and so\r\n     * they should only be requested if the consumer intends to monitor them.\r\n     */\n    this.reportProgress = false;\n    /**\r\n     * Whether this request should be sent with outgoing credentials (cookies).\r\n     */\n    this.withCredentials = false;\n    /**\r\n     * The expected response type of the server.\r\n     *\r\n     * This is used to parse the response appropriately before returning it to\r\n     * the requestee.\r\n     */\n    this.responseType = 'json';\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    let options;\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = third !== undefined ? third : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third;\n    }\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n      if (!!options.context) {\n        this.context = options.context;\n      }\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    }\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    }\n    // If no context have been passed in, construct a new HttpContext instance.\n    if (!this.context) {\n      this.context = new HttpContext();\n    }\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        const sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n  /**\r\n   * Transform the free-form body into a serialized format suitable for\r\n   * transmission to the server.\r\n   */\n  serializeBody() {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || isUrlSearchParams(this.body) || typeof this.body === 'string') {\n      return this.body;\n    }\n    // Check whether the body is an instance of HttpUrlEncodedParams.\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return this.body.toString();\n  }\n  /**\r\n   * Examine the body and attempt to infer an appropriate MIME type\r\n   * for it.\r\n   *\r\n   * If no such type can be inferred, this method will return `null`.\r\n   */\n  detectContentTypeHeader() {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData bodies rely on the browser's content type assignment.\n    if (isFormData(this.body)) {\n      return null;\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return 'text/plain';\n    }\n    // `HttpUrlEncodedParams` has its own content-type.\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Arrays, objects, boolean and numbers will be encoded as JSON.\n    if (typeof this.body === 'object' || typeof this.body === 'number' || typeof this.body === 'boolean') {\n      return 'application/json';\n    }\n    // No type could be inferred.\n    return null;\n  }\n  clone(update = {}) {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType;\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    const body = update.body !== undefined ? update.body : this.body;\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    const withCredentials = update.withCredentials !== undefined ? update.withCredentials : this.withCredentials;\n    const reportProgress = update.reportProgress !== undefined ? update.reportProgress : this.reportProgress;\n    // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params;\n    // Pass on context if needed\n    const context = update.context ?? this.context;\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers = Object.keys(update.setHeaders).reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n    }\n    // Check whether the caller has asked to set params.\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams).reduce((params, param) => params.set(param, update.setParams[param]), params);\n    }\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(method, url, body, {\n      params,\n      headers,\n      context,\n      reportProgress,\n      responseType,\n      withCredentials\n    });\n  }\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Type enumeration for the different kinds of `HttpEvent`.\r\n *\r\n * @publicApi\r\n */\nvar HttpEventType;\n(function (HttpEventType) {\n  /**\r\n   * The request was sent out over the wire.\r\n   */\n  HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n  /**\r\n   * An upload progress event was received.\r\n   */\n  HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n  /**\r\n   * The response status code and headers were received.\r\n   */\n  HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n  /**\r\n   * A download progress event was received.\r\n   */\n  HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n  /**\r\n   * The full response including the body was received.\r\n   */\n  HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n  /**\r\n   * A custom event from an interceptor or a backend.\r\n   */\n  HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\r\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\r\n *\r\n * @publicApi\r\n */\nclass HttpResponseBase {\n  /**\r\n   * Super-constructor for all responses.\r\n   *\r\n   * The single parameter accepted is an initialization hash. Any properties\r\n   * of the response passed there will override the default values.\r\n   */\n  constructor(init, defaultStatus = 200 /* HttpStatusCode.Ok */, defaultStatusText = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\n/**\r\n * A partial HTTP response which only includes the status and header data,\r\n * but no response body.\r\n *\r\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\r\n * event stream, only when progress events are requested.\r\n *\r\n * @publicApi\r\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n  /**\r\n   * Create a new `HttpHeaderResponse` with the given parameters.\r\n   */\n  constructor(init = {}) {\n    super(init);\n    this.type = HttpEventType.ResponseHeader;\n  }\n  /**\r\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\r\n   * given parameter hash.\r\n   */\n  clone(update = {}) {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined\n    });\n  }\n}\n/**\r\n * A full HTTP response, including a typed response body (which may be `null`\r\n * if one was not returned).\r\n *\r\n * `HttpResponse` is a `HttpEvent` available on the response event\r\n * stream.\r\n *\r\n * @publicApi\r\n */\nclass HttpResponse extends HttpResponseBase {\n  /**\r\n   * Construct a new `HttpResponse`.\r\n   */\n  constructor(init = {}) {\n    super(init);\n    this.type = HttpEventType.Response;\n    this.body = init.body !== undefined ? init.body : null;\n  }\n  clone(update = {}) {\n    return new HttpResponse({\n      body: update.body !== undefined ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined\n    });\n  }\n}\n/**\r\n * A response that represents an error or failure, either from a\r\n * non-successful HTTP status, an error while executing the request,\r\n * or some other failure which occurred during the parsing of the response.\r\n *\r\n * Any error returned on the `Observable` response stream will be\r\n * wrapped in an `HttpErrorResponse` to provide additional context about\r\n * the state of the HTTP layer when the error occurred. The error property\r\n * will contain either a wrapped Error object or the error response returned\r\n * from the server.\r\n *\r\n * @publicApi\r\n */\nclass HttpErrorResponse extends HttpResponseBase {\n  constructor(init) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n    this.name = 'HttpErrorResponse';\n    /**\r\n     * Errors are never okay, even when the status code is in the 2xx success range.\r\n     */\n    this.ok = false;\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n    }\n    this.error = init.error || null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\r\n * the given `body`. This function clones the object and adds the body.\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n *\r\n */\nfunction addBody(options, body) {\n  return {\n    body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials\n  };\n}\n/**\r\n * Performs HTTP requests.\r\n * This service is available as an injectable class, with methods to perform HTTP requests.\r\n * Each request method has multiple signatures, and the return type varies based on\r\n * the signature that is called (mainly the values of `observe` and `responseType`).\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n\r\n *\r\n * @usageNotes\r\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/tour-of-heroes/toh-pt0) application.\r\n *\r\n * ### HTTP Request Example\r\n *\r\n * ```\r\n *  // GET heroes whose name contains search term\r\n * searchHeroes(term: string): observable<Hero[]>{\r\n *\r\n *  const params = new HttpParams({fromString: 'name=term'});\r\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\r\n * }\r\n * ```\r\n *\r\n * Alternatively, the parameter string can be used without invoking HttpParams\r\n * by directly joining to the URL.\r\n * ```\r\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\r\n * ```\r\n *\r\n *\r\n * ### JSONP Example\r\n * ```\r\n * requestJsonp(url, callback = 'callback') {\r\n *  return this.httpClient.jsonp(this.heroesURL, callback);\r\n * }\r\n * ```\r\n *\r\n * ### PATCH Example\r\n * ```\r\n * // PATCH one of the heroes' name\r\n * patchHero (id: number, heroName: string): Observable<{}> {\r\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\r\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\r\n *    .pipe(catchError(this.handleError('patchHero')));\r\n * }\r\n * ```\r\n *\r\n * @see [HTTP Guide](guide/http)\r\n * @see [HTTP Request](api/common/http/HttpRequest)\r\n *\r\n * @publicApi\r\n */\nclass HttpClient {\n  constructor(handler) {\n    this.handler = handler;\n  }\n  /**\r\n   * Constructs an observable for a generic HTTP request that, when subscribed,\r\n   * fires the request through the chain of registered interceptors and on to the\r\n   * server.\r\n   *\r\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\r\n   * the call returns an observable of the raw `HttpEvent` stream.\r\n   *\r\n   * Alternatively you can pass an HTTP method as the first parameter,\r\n   * a URL string as the second, and an options hash containing the request body as the third.\r\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\r\n   * type of returned observable.\r\n   *   * The `responseType` value determines how a successful response body is parsed.\r\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\r\n   * object as a type parameter to the call.\r\n   *\r\n   * The `observe` value determines the return type, according to what you are interested in\r\n   * observing.\r\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\r\n   * progress events by default.\r\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\r\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\r\n   * parameter.\r\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\r\n   *\r\n   */\n  request(first, url, options = {}) {\n    let req;\n    // First, check whether the primary argument is an instance of `HttpRequest`.\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = first;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming `GET` unless a method is\n      // provided.\n      // Figure out the headers.\n      let headers = undefined;\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      }\n      // Sort out parameters.\n      let params = undefined;\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams({\n            fromObject: options.params\n          });\n        }\n      }\n      // Construct the request.\n      req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {\n        headers,\n        context: options.context,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials\n      });\n    }\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    const events$ = of(req).pipe(concatMap(req => this.handler.handle(req)));\n    // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    }\n    // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n    const res$ = events$.pipe(filter(event => event instanceof HttpResponse));\n    // Decide which stream to return.\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(map(res => {\n              // Validate that the body is an ArrayBuffer.\n              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                throw new Error('Response is not an ArrayBuffer.');\n              }\n              return res.body;\n            }));\n          case 'blob':\n            return res$.pipe(map(res => {\n              // Validate that the body is a Blob.\n              if (res.body !== null && !(res.body instanceof Blob)) {\n                throw new Error('Response is not a Blob.');\n              }\n              return res.body;\n            }));\n          case 'text':\n            return res$.pipe(map(res => {\n              // Validate that the body is a string.\n              if (res.body !== null && typeof res.body !== 'string') {\n                throw new Error('Response is not a string.');\n              }\n              return res.body;\n            }));\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map(res => res.body));\n        }\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n      default:\n        // Guard against new future observe types being added.\n        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n    }\n  }\n  /**\r\n   * Constructs an observable that, when subscribed, causes the configured\r\n   * `DELETE` request to execute on the server. See the individual overloads for\r\n   * details on the return type.\r\n   *\r\n   * @param url     The endpoint URL.\r\n   * @param options The HTTP options to send with the request.\r\n   *\r\n   */\n  delete(url, options = {}) {\n    return this.request('DELETE', url, options);\n  }\n  /**\r\n   * Constructs an observable that, when subscribed, causes the configured\r\n   * `GET` request to execute on the server. See the individual overloads for\r\n   * details on the return type.\r\n   */\n  get(url, options = {}) {\n    return this.request('GET', url, options);\n  }\n  /**\r\n   * Constructs an observable that, when subscribed, causes the configured\r\n   * `HEAD` request to execute on the server. The `HEAD` method returns\r\n   * meta information about the resource without transferring the\r\n   * resource itself. See the individual overloads for\r\n   * details on the return type.\r\n   */\n  head(url, options = {}) {\n    return this.request('HEAD', url, options);\n  }\n  /**\r\n   * Constructs an `Observable` that, when subscribed, causes a request with the special method\r\n   * `JSONP` to be dispatched via the interceptor pipeline.\r\n   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\r\n   * API endpoints that don't support newer,\r\n   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\r\n   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\r\n   * requests even if the API endpoint is not located on the same domain (origin) as the client-side\r\n   * application making the request.\r\n   * The endpoint API must support JSONP callback for JSONP requests to work.\r\n   * The resource API returns the JSON response wrapped in a callback function.\r\n   * You can pass the callback function name as one of the query parameters.\r\n   * Note that JSONP requests can only be used with `GET` requests.\r\n   *\r\n   * @param url The resource URL.\r\n   * @param callbackParam The callback function name.\r\n   *\r\n   */\n  jsonp(url, callbackParam) {\n    return this.request('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json'\n    });\n  }\n  /**\r\n   * Constructs an `Observable` that, when subscribed, causes the configured\r\n   * `OPTIONS` request to execute on the server. This method allows the client\r\n   * to determine the supported HTTP methods and other capabilities of an endpoint,\r\n   * without implying a resource action. See the individual overloads for\r\n   * details on the return type.\r\n   */\n  options(url, options = {}) {\n    return this.request('OPTIONS', url, options);\n  }\n  /**\r\n   * Constructs an observable that, when subscribed, causes the configured\r\n   * `PATCH` request to execute on the server. See the individual overloads for\r\n   * details on the return type.\r\n   */\n  patch(url, body, options = {}) {\n    return this.request('PATCH', url, addBody(options, body));\n  }\n  /**\r\n   * Constructs an observable that, when subscribed, causes the configured\r\n   * `POST` request to execute on the server. The server responds with the location of\r\n   * the replaced resource. See the individual overloads for\r\n   * details on the return type.\r\n   */\n  post(url, body, options = {}) {\n    return this.request('POST', url, addBody(options, body));\n  }\n  /**\r\n   * Constructs an observable that, when subscribed, causes the configured\r\n   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\r\n   * with a new set of values.\r\n   * See the individual overloads for details on the return type.\r\n   */\n  put(url, body, options = {}) {\n    return this.request('PUT', url, addBody(options, body));\n  }\n}\nHttpClient.Éµfac = function HttpClient_Factory(t) {\n  return new (t || HttpClient)(i0.ÉµÉµinject(HttpHandler));\n};\nHttpClient.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpClient,\n  factory: HttpClient.Éµfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpClient, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpHandler\n    }];\n  }, null);\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nfunction interceptorChainEndFn(req, finalHandlerFn) {\n  return finalHandlerFn(req);\n}\n/**\r\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\r\n * `ChainedInterceptorFn` interface.\r\n */\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\n  return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n    handle: downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)\n  });\n}\n/**\r\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\r\n * injector.\r\n */\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\n  // clang-format off\n  return (initialRequest, finalHandlerFn) => injector.runInContext(() => interceptorFn(initialRequest, downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)));\n  // clang-format on\n}\n/**\r\n * A multi-provider token that represents the array of registered\r\n * `HttpInterceptor` objects.\r\n *\r\n * @publicApi\r\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\n/**\r\n * A multi-provided token of `HttpInterceptorFn`s.\r\n */\nconst HTTP_INTERCEPTOR_FNS = new InjectionToken('HTTP_INTERCEPTOR_FNS');\n/**\r\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\r\n * class-based interceptors and runs the request through it.\r\n */\nfunction legacyInterceptorFnFactory() {\n  let chain = null;\n  return (req, handler) => {\n    if (chain === null) {\n      const interceptors = inject(HTTP_INTERCEPTORS, {\n        optional: true\n      }) ?? [];\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\n    }\n    return chain(req, handler);\n  };\n}\nclass HttpInterceptorHandler extends HttpHandler {\n  constructor(backend, injector) {\n    super();\n    this.backend = backend;\n    this.injector = injector;\n    this.chain = null;\n  }\n  handle(initialRequest) {\n    if (this.chain === null) {\n      const dedupedInterceptorFns = Array.from(new Set(this.injector.get(HTTP_INTERCEPTOR_FNS)));\n      // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n      this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);\n    }\n    return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest));\n  }\n}\nHttpInterceptorHandler.Éµfac = function HttpInterceptorHandler_Factory(t) {\n  return new (t || HttpInterceptorHandler)(i0.ÉµÉµinject(HttpBackend), i0.ÉµÉµinject(i0.EnvironmentInjector));\n};\nHttpInterceptorHandler.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpInterceptorHandler,\n  factory: HttpInterceptorHandler.Éµfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpInterceptorHandler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpBackend\n    }, {\n      type: i0.EnvironmentInjector\n    }];\n  }, null);\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n/**\r\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\r\n * executed.\r\n */\nlet foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\r\n * DI token/abstract type representing a map of JSONP callbacks.\r\n *\r\n * In the browser, this should always be the `window` object.\r\n *\r\n *\r\n */\nclass JsonpCallbackContext {}\n/**\r\n * Factory function that determines where to store JSONP callbacks.\r\n *\r\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\r\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\r\n *\r\n *\r\n */\nfunction jsonpCallbackContext() {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n/**\r\n * Processes an `HttpRequest` with the JSONP method,\r\n * by performing JSONP style requests.\r\n * @see `HttpHandler`\r\n * @see `HttpXhrBackend`\r\n *\r\n * @publicApi\r\n */\nclass JsonpClientBackend {\n  constructor(callbackMap, document) {\n    this.callbackMap = callbackMap;\n    this.document = document;\n    /**\r\n     * A resolved promise that can be used to schedule microtasks in the event handlers.\r\n     */\n    this.resolvedPromise = Promise.resolve();\n  }\n  /**\r\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\r\n   */\n  nextCallback() {\n    return `ng_jsonp_callback_${nextRequestId++}`;\n  }\n  /**\r\n   * Processes a JSONP request and returns an event stream of the results.\r\n   * @param req The request object.\r\n   * @returns An observable of the response events.\r\n   *\r\n   */\n  handle(req) {\n    // Firstly, check both the method and response type. If either doesn't match\n    // then the request was improperly routed here and cannot be handled.\n    if (req.method !== 'JSONP') {\n      throw new Error(JSONP_ERR_WRONG_METHOD);\n    } else if (req.responseType !== 'json') {\n      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n    }\n    // Check the request headers. JSONP doesn't support headers and\n    // cannot set any that were supplied.\n    if (req.headers.keys().length > 0) {\n      throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n    }\n    // Everything else happens inside the Observable boundary.\n    return new Observable(observer => {\n      // The first step to make a request is to generate the callback name, and replace the\n      // callback placeholder in the URL with the name. Care has to be taken here to ensure\n      // a trailing &, if matched, gets inserted back into the URL in the correct place.\n      const callback = this.nextCallback();\n      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n      // Construct the <script> tag and point it at the URL.\n      const node = this.document.createElement('script');\n      node.src = url;\n      // A JSONP request requires waiting for multiple callbacks. These variables\n      // are closed over and track state across those callbacks.\n      // The response object, if one has been received, or null otherwise.\n      let body = null;\n      // Whether the response callback has been called.\n      let finished = false;\n      // Set the response callback in this.callbackMap (which will be the window\n      // object in the browser. The script being loaded via the <script> tag will\n      // eventually call this callback.\n      this.callbackMap[callback] = data => {\n        // Data has been received from the JSONP script. Firstly, delete this callback.\n        delete this.callbackMap[callback];\n        // Set state to indicate data was received.\n        body = data;\n        finished = true;\n      };\n      // cleanup() is a utility closure that removes the <script> from the page and\n      // the response callback from the window. This logic is used in both the\n      // success, error, and cancellation paths, so it's extracted out for convenience.\n      const cleanup = () => {\n        // Remove the <script> tag if it's still on the page.\n        if (node.parentNode) {\n          node.parentNode.removeChild(node);\n        }\n        // Remove the response callback from the callbackMap (window object in the\n        // browser).\n        delete this.callbackMap[callback];\n      };\n      // onLoad() is the success callback which runs after the response callback\n      // if the JSONP script loads successfully. The event itself is unimportant.\n      // If something went wrong, onLoad() may run without the response callback\n      // having been invoked.\n      const onLoad = event => {\n        // We wrap it in an extra Promise, to ensure the microtask\n        // is scheduled after the loaded endpoint has executed any potential microtask itself,\n        // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n        this.resolvedPromise.then(() => {\n          // Cleanup the page.\n          cleanup();\n          // Check whether the response callback has run.\n          if (!finished) {\n            // It hasn't, something went wrong with the request. Return an error via\n            // the Observable error path. All JSONP errors have status 0.\n            observer.error(new HttpErrorResponse({\n              url,\n              status: 0,\n              statusText: 'JSONP Error',\n              error: new Error(JSONP_ERR_NO_CALLBACK)\n            }));\n            return;\n          }\n          // Success. body either contains the response body or null if none was\n          // returned.\n          observer.next(new HttpResponse({\n            body,\n            status: 200 /* HttpStatusCode.Ok */,\n            statusText: 'OK',\n            url\n          }));\n          // Complete the stream, the response is over.\n          observer.complete();\n        });\n      };\n      // onError() is the error callback, which runs if the script returned generates\n      // a Javascript error. It emits the error via the Observable error channel as\n      // a HttpErrorResponse.\n      const onError = error => {\n        cleanup();\n        // Wrap the error in a HttpErrorResponse.\n        observer.error(new HttpErrorResponse({\n          error,\n          status: 0,\n          statusText: 'JSONP Error',\n          url\n        }));\n      };\n      // Subscribe to both the success (load) and error events on the <script> tag,\n      // and add it to the page.\n      node.addEventListener('load', onLoad);\n      node.addEventListener('error', onError);\n      this.document.body.appendChild(node);\n      // The request has now been successfully sent.\n      observer.next({\n        type: HttpEventType.Sent\n      });\n      // Cancellation handler.\n      return () => {\n        if (!finished) {\n          this.removeListeners(node);\n        }\n        // And finally, clean up the page.\n        cleanup();\n      };\n    });\n  }\n  removeListeners(script) {\n    // Issue #34818\n    // Changing <script>'s ownerDocument will prevent it from execution.\n    // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n    if (!foreignDocument) {\n      foreignDocument = this.document.implementation.createHTMLDocument();\n    }\n    foreignDocument.adoptNode(script);\n  }\n}\nJsonpClientBackend.Éµfac = function JsonpClientBackend_Factory(t) {\n  return new (t || JsonpClientBackend)(i0.ÉµÉµinject(JsonpCallbackContext), i0.ÉµÉµinject(DOCUMENT));\n};\nJsonpClientBackend.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: JsonpClientBackend,\n  factory: JsonpClientBackend.Éµfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(JsonpClientBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: JsonpCallbackContext\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\r\n */\nfunction jsonpInterceptorFn(req, next) {\n  if (req.method === 'JSONP') {\n    return inject(JsonpClientBackend).handle(req);\n  }\n  // Fall through for normal HTTP requests.\n  return next(req);\n}\n/**\r\n * Identifies requests with the method JSONP and\r\n * shifts them to the `JsonpClientBackend`.\r\n *\r\n * @see `HttpInterceptor`\r\n *\r\n * @publicApi\r\n */\nclass JsonpInterceptor {\n  constructor(injector) {\n    this.injector = injector;\n  }\n  /**\r\n   * Identifies and handles a given JSONP request.\r\n   * @param initialRequest The outgoing request object to handle.\r\n   * @param next The next interceptor in the chain, or the backend\r\n   * if no interceptors remain in the chain.\r\n   * @returns An observable of the event stream.\r\n   */\n  intercept(initialRequest, next) {\n    return this.injector.runInContext(() => jsonpInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n}\nJsonpInterceptor.Éµfac = function JsonpInterceptor_Factory(t) {\n  return new (t || JsonpInterceptor)(i0.ÉµÉµinject(i0.EnvironmentInjector));\n};\nJsonpInterceptor.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: JsonpInterceptor,\n  factory: JsonpInterceptor.Éµfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(JsonpInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.EnvironmentInjector\n    }];\n  }, null);\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\r\n * Determine an appropriate URL for the response, by checking either\r\n * XMLHttpRequest.responseURL or the X-Request-URL header.\r\n */\nfunction getResponseUrl(xhr) {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n/**\r\n * Uses `XMLHttpRequest` to send requests to a backend server.\r\n * @see `HttpHandler`\r\n * @see `JsonpClientBackend`\r\n *\r\n * @publicApi\r\n */\nclass HttpXhrBackend {\n  constructor(xhrFactory) {\n    this.xhrFactory = xhrFactory;\n  }\n  /**\r\n   * Processes a request and returns a stream of response events.\r\n   * @param req The request object.\r\n   * @returns An observable of the response events.\r\n   */\n  handle(req) {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the HttpClientJsonpModule\n    if (req.method === 'JSONP') {\n      throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n    }\n    // Everything happens on Observable subscription.\n    return new Observable(observer => {\n      // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n      const xhr = this.xhrFactory.build();\n      xhr.open(req.method, req.urlWithParams);\n      if (!!req.withCredentials) {\n        xhr.withCredentials = true;\n      }\n      // Add all the requested headers.\n      req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n      // Add an Accept header if one isn't present already.\n      if (!req.headers.has('Accept')) {\n        xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n      }\n      // Auto-detect the Content-Type header if one isn't present already.\n      if (!req.headers.has('Content-Type')) {\n        const detectedType = req.detectContentTypeHeader();\n        // Sometimes Content-Type detection fails.\n        if (detectedType !== null) {\n          xhr.setRequestHeader('Content-Type', detectedType);\n        }\n      }\n      // Set the responseType if one was requested.\n      if (req.responseType) {\n        const responseType = req.responseType.toLowerCase();\n        // JSON responses need to be processed as text. This is because if the server\n        // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n        // xhr.response will be null, and xhr.responseText cannot be accessed to\n        // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n        // is parsed by first requesting text and then applying JSON.parse.\n        xhr.responseType = responseType !== 'json' ? responseType : 'text';\n      }\n      // Serialize the request body if one is present. If not, this will be set to null.\n      const reqBody = req.serializeBody();\n      // If progress events are enabled, response headers will be delivered\n      // in two events - the HttpHeaderResponse event and the full HttpResponse\n      // event. However, since response headers don't change in between these\n      // two events, it doesn't make sense to parse them twice. So headerResponse\n      // caches the data extracted from the response whenever it's first parsed,\n      // to ensure parsing isn't duplicated.\n      let headerResponse = null;\n      // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n      // state, and memoizes it into headerResponse.\n      const partialFromXhr = () => {\n        if (headerResponse !== null) {\n          return headerResponse;\n        }\n        const statusText = xhr.statusText || 'OK';\n        // Parse headers from XMLHttpRequest - this step is lazy.\n        const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n        // Read the response URL from the XMLHttpResponse instance and fall back on the\n        // request URL.\n        const url = getResponseUrl(xhr) || req.url;\n        // Construct the HttpHeaderResponse and memoize it.\n        headerResponse = new HttpHeaderResponse({\n          headers,\n          status: xhr.status,\n          statusText,\n          url\n        });\n        return headerResponse;\n      };\n      // Next, a few closures are defined for the various events which XMLHttpRequest can\n      // emit. This allows them to be unregistered as event listeners later.\n      // First up is the load event, which represents a response being fully available.\n      const onLoad = () => {\n        // Read response state from the memoized partial data.\n        let {\n          headers,\n          status,\n          statusText,\n          url\n        } = partialFromXhr();\n        // The body will be read out if present.\n        let body = null;\n        if (status !== 204 /* HttpStatusCode.NoContent */) {\n          // Use XMLHttpRequest.response if set, responseText otherwise.\n          body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n        }\n        // Normalize another potential bug (this one comes from CORS).\n        if (status === 0) {\n          status = !!body ? 200 /* HttpStatusCode.Ok */ : 0;\n        }\n        // ok determines whether the response will be transmitted on the event or\n        // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n        // but a successful status code can still result in an error if the user\n        // asked for JSON data and the body cannot be parsed as such.\n        let ok = status >= 200 && status < 300;\n        // Check whether the body needs to be parsed as JSON (in many cases the browser\n        // will have done that already).\n        if (req.responseType === 'json' && typeof body === 'string') {\n          // Save the original body, before attempting XSSI prefix stripping.\n          const originalBody = body;\n          body = body.replace(XSSI_PREFIX, '');\n          try {\n            // Attempt the parse. If it fails, a parse error should be delivered to the user.\n            body = body !== '' ? JSON.parse(body) : null;\n          } catch (error) {\n            // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n            // JSON response. Restore the original body (including any XSSI prefix) to deliver\n            // a better error response.\n            body = originalBody;\n            // If this was an error request to begin with, leave it as a string, it probably\n            // just isn't JSON. Otherwise, deliver the parsing error to the user.\n            if (ok) {\n              // Even though the response status was 2xx, this is still an error.\n              ok = false;\n              // The parse error contains the text of the body that failed to parse.\n              body = {\n                error,\n                text: body\n              };\n            }\n          }\n        }\n        if (ok) {\n          // A successful response is delivered on the event stream.\n          observer.next(new HttpResponse({\n            body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined\n          }));\n          // The full body has been received and delivered, no further events\n          // are possible. This request is complete.\n          observer.complete();\n        } else {\n          // An unsuccessful request is delivered on the error channel.\n          observer.error(new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined\n          }));\n        }\n      };\n      // The onError callback is called when something goes wrong at the network level.\n      // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n      // transmitted on the error channel.\n      const onError = error => {\n        const {\n          url\n        } = partialFromXhr();\n        const res = new HttpErrorResponse({\n          error,\n          status: xhr.status || 0,\n          statusText: xhr.statusText || 'Unknown Error',\n          url: url || undefined\n        });\n        observer.error(res);\n      };\n      // The sentHeaders flag tracks whether the HttpResponseHeaders event\n      // has been sent on the stream. This is necessary to track if progress\n      // is enabled since the event will be sent on only the first download\n      // progress event.\n      let sentHeaders = false;\n      // The download progress event handler, which is only registered if\n      // progress events are enabled.\n      const onDownProgress = event => {\n        // Send the HttpResponseHeaders event if it hasn't been sent already.\n        if (!sentHeaders) {\n          observer.next(partialFromXhr());\n          sentHeaders = true;\n        }\n        // Start building the download progress event to deliver on the response\n        // event stream.\n        let progressEvent = {\n          type: HttpEventType.DownloadProgress,\n          loaded: event.loaded\n        };\n        // Set the total number of bytes in the event if it's available.\n        if (event.lengthComputable) {\n          progressEvent.total = event.total;\n        }\n        // If the request was for text content and a partial response is\n        // available on XMLHttpRequest, include it in the progress event\n        // to allow for streaming reads.\n        if (req.responseType === 'text' && !!xhr.responseText) {\n          progressEvent.partialText = xhr.responseText;\n        }\n        // Finally, fire the event.\n        observer.next(progressEvent);\n      };\n      // The upload progress event handler, which is only registered if\n      // progress events are enabled.\n      const onUpProgress = event => {\n        // Upload progress events are simpler. Begin building the progress\n        // event.\n        let progress = {\n          type: HttpEventType.UploadProgress,\n          loaded: event.loaded\n        };\n        // If the total number of bytes being uploaded is available, include\n        // it.\n        if (event.lengthComputable) {\n          progress.total = event.total;\n        }\n        // Send the event.\n        observer.next(progress);\n      };\n      // By default, register for load and error events.\n      xhr.addEventListener('load', onLoad);\n      xhr.addEventListener('error', onError);\n      xhr.addEventListener('timeout', onError);\n      xhr.addEventListener('abort', onError);\n      // Progress events are only enabled if requested.\n      if (req.reportProgress) {\n        // Download progress is always enabled if requested.\n        xhr.addEventListener('progress', onDownProgress);\n        // Upload progress depends on whether there is a body to upload.\n        if (reqBody !== null && xhr.upload) {\n          xhr.upload.addEventListener('progress', onUpProgress);\n        }\n      }\n      // Fire the request, and notify the event stream that it was fired.\n      xhr.send(reqBody);\n      observer.next({\n        type: HttpEventType.Sent\n      });\n      // This is the return from the Observable function, which is the\n      // request cancellation handler.\n      return () => {\n        // On a cancellation, remove all registered event listeners.\n        xhr.removeEventListener('error', onError);\n        xhr.removeEventListener('abort', onError);\n        xhr.removeEventListener('load', onLoad);\n        xhr.removeEventListener('timeout', onError);\n        if (req.reportProgress) {\n          xhr.removeEventListener('progress', onDownProgress);\n          if (reqBody !== null && xhr.upload) {\n            xhr.upload.removeEventListener('progress', onUpProgress);\n          }\n        }\n        // Finally, abort the in-flight request.\n        if (xhr.readyState !== xhr.DONE) {\n          xhr.abort();\n        }\n      };\n    });\n  }\n}\nHttpXhrBackend.Éµfac = function HttpXhrBackend_Factory(t) {\n  return new (t || HttpXhrBackend)(i0.ÉµÉµinject(i1.XhrFactory));\n};\nHttpXhrBackend.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpXhrBackend,\n  factory: HttpXhrBackend.Éµfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpXhrBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.XhrFactory\n    }];\n  }, null);\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nconst XSRF_ENABLED = new InjectionToken('XSRF_ENABLED');\nconst XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_COOKIE_NAME\n});\nconst XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_HEADER_NAME\n});\n/**\r\n * Retrieves the current XSRF token to use with the next outgoing request.\r\n *\r\n * @publicApi\r\n */\nclass HttpXsrfTokenExtractor {}\n/**\r\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\r\n */\nclass HttpXsrfCookieExtractor {\n  constructor(doc, platform, cookieName) {\n    this.doc = doc;\n    this.platform = platform;\n    this.cookieName = cookieName;\n    this.lastCookieString = '';\n    this.lastToken = null;\n    /**\r\n     * @internal for testing\r\n     */\n    this.parseCount = 0;\n  }\n  getToken() {\n    if (this.platform === 'server') {\n      return null;\n    }\n    const cookieString = this.doc.cookie || '';\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = ÉµparseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n    return this.lastToken;\n  }\n}\nHttpXsrfCookieExtractor.Éµfac = function HttpXsrfCookieExtractor_Factory(t) {\n  return new (t || HttpXsrfCookieExtractor)(i0.ÉµÉµinject(DOCUMENT), i0.ÉµÉµinject(PLATFORM_ID), i0.ÉµÉµinject(XSRF_COOKIE_NAME));\n};\nHttpXsrfCookieExtractor.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpXsrfCookieExtractor,\n  factory: HttpXsrfCookieExtractor.Éµfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpXsrfCookieExtractor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [XSRF_COOKIE_NAME]\n      }]\n    }];\n  }, null);\n})();\nfunction xsrfInterceptorFn(req, next) {\n  const lcUrl = req.url.toLowerCase();\n  // Skip both non-mutating requests and absolute URLs.\n  // Non-mutating requests don't require a token, and absolute URLs require special handling\n  // anyway as the cookie set\n  // on our origin is not the same as the token expected by another origin.\n  if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n    return next(req);\n  }\n  const token = inject(HttpXsrfTokenExtractor).getToken();\n  const headerName = inject(XSRF_HEADER_NAME);\n  // Be careful not to overwrite an existing header of the same name.\n  if (token != null && !req.headers.has(headerName)) {\n    req = req.clone({\n      headers: req.headers.set(headerName, token)\n    });\n  }\n  return next(req);\n}\n/**\r\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\r\n */\nclass HttpXsrfInterceptor {\n  constructor(injector) {\n    this.injector = injector;\n  }\n  intercept(initialRequest, next) {\n    return this.injector.runInContext(() => xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n}\nHttpXsrfInterceptor.Éµfac = function HttpXsrfInterceptor_Factory(t) {\n  return new (t || HttpXsrfInterceptor)(i0.ÉµÉµinject(i0.EnvironmentInjector));\n};\nHttpXsrfInterceptor.Éµprov = /* @__PURE__ */i0.ÉµÉµdefineInjectable({\n  token: HttpXsrfInterceptor,\n  factory: HttpXsrfInterceptor.Éµfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpXsrfInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.EnvironmentInjector\n    }];\n  }, null);\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Identifies a particular kind of `HttpFeature`.\r\n *\r\n * @publicApi\r\n */\nvar HttpFeatureKind;\n(function (HttpFeatureKind) {\n  HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\n  HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\n  HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\n  HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\n  HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\n  HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\n})(HttpFeatureKind || (HttpFeatureKind = {}));\nfunction makeHttpFeature(kind, providers) {\n  return {\n    Éµkind: kind,\n    Éµproviders: providers\n  };\n}\n/**\r\n * Configures Angular's `HttpClient` service to be available for injection.\r\n *\r\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\r\n * protection of outgoing requests. Additional configuration options can be provided by passing\r\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\r\n * `withInterceptors(...)` feature.\r\n *\r\n * @see withInterceptors\r\n * @see withInterceptorsFromDi\r\n * @see withXsrfConfiguration\r\n * @see withNoXsrfProtection\r\n * @see withJsonpSupport\r\n * @see withRequestsMadeViaParent\r\n */\nfunction provideHttpClient(...features) {\n  if (ngDevMode) {\n    const featureKinds = new Set(features.map(f => f.Éµkind));\n    if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) && featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n      throw new Error(ngDevMode ? `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` : '');\n    }\n  }\n  const providers = [HttpClient, HttpXhrBackend, HttpInterceptorHandler, {\n    provide: HttpHandler,\n    useExisting: HttpInterceptorHandler\n  }, {\n    provide: HttpBackend,\n    useExisting: HttpXhrBackend\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useValue: xsrfInterceptorFn,\n    multi: true\n  }, {\n    provide: XSRF_ENABLED,\n    useValue: true\n  }, {\n    provide: HttpXsrfTokenExtractor,\n    useClass: HttpXsrfCookieExtractor\n  }];\n  for (const feature of features) {\n    providers.push(...feature.Éµproviders);\n  }\n  return makeEnvironmentProviders(providers);\n}\n/**\r\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\r\n * instance.\r\n *\r\n * @see HttpInterceptorFn\r\n * @see provideHttpClient\r\n * @publicApi\r\n */\nfunction withInterceptors(interceptorFns) {\n  return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\n    return {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: interceptorFn,\n      multi: true\n    };\n  }));\n}\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken('LEGACY_INTERCEPTOR_FN');\n/**\r\n * Includes class-based interceptors configured using a multi-provider in the current injector into\r\n * the configured `HttpClient` instance.\r\n *\r\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\r\n * interceptors may be phased out in a later release.\r\n *\r\n * @see HttpInterceptor\r\n * @see HTTP_INTERCEPTORS\r\n * @see provideHttpClient\r\n */\nfunction withInterceptorsFromDi() {\n  // Note: the legacy interceptor function is provided here via an intermediate token\n  // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n  // included multiple times, all of the multi-provider entries will have the same instance of the\n  // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n  // interceptors will not run multiple times.\n  return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [{\n    provide: LEGACY_INTERCEPTOR_FN,\n    useFactory: legacyInterceptorFnFactory\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useExisting: LEGACY_INTERCEPTOR_FN,\n    multi: true\n  }]);\n}\n/**\r\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\r\n *\r\n * This feature is incompatible with the `withNoXsrfProtection` feature.\r\n *\r\n * @see provideHttpClient\r\n */\nfunction withXsrfConfiguration({\n  cookieName,\n  headerName\n}) {\n  const providers = [];\n  if (cookieName !== undefined) {\n    providers.push({\n      provide: XSRF_COOKIE_NAME,\n      useValue: cookieName\n    });\n  }\n  if (headerName !== undefined) {\n    providers.push({\n      provide: XSRF_HEADER_NAME,\n      useValue: headerName\n    });\n  }\n  return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n/**\r\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\r\n *\r\n * This feature is incompatible with the `withXsrfConfiguration` feature.\r\n *\r\n * @see provideHttpClient\r\n */\nfunction withNoXsrfProtection() {\n  return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [{\n    provide: XSRF_ENABLED,\n    useValue: false\n  }]);\n}\n/**\r\n * Add JSONP support to the configuration of the current `HttpClient` instance.\r\n *\r\n * @see provideHttpClient\r\n */\nfunction withJsonpSupport() {\n  return makeHttpFeature(HttpFeatureKind.JsonpSupport, [JsonpClientBackend, {\n    provide: JsonpCallbackContext,\n    useFactory: jsonpCallbackContext\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useValue: jsonpInterceptorFn,\n    multi: true\n  }]);\n}\n/**\r\n * Configures the current `HttpClient` instance to make requests via the parent injector's\r\n * `HttpClient` instead of directly.\r\n *\r\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\r\n * instance. For example, even if `HttpClient` is configured in the parent injector with\r\n * one or more interceptors, they will not intercept requests made via this instance.\r\n *\r\n * With this option enabled, once the request has passed through the current injector's\r\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\r\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\r\n *\r\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\r\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\r\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\r\n * this option.\r\n *\r\n * @see provideHttpClient\r\n * @developerPreview\r\n */\nfunction withRequestsMadeViaParent() {\n  return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [{\n    provide: HttpBackend,\n    useFactory: () => {\n      const handlerFromParent = inject(HttpHandler, {\n        skipSelf: true,\n        optional: true\n      });\n      if (ngDevMode && handlerFromParent === null) {\n        throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n      }\n      return handlerFromParent;\n    }\n  }]);\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Configures XSRF protection support for outgoing requests.\r\n *\r\n * For a server that supports a cookie-based XSRF protection system,\r\n * use directly to configure XSRF protection with the correct\r\n * cookie and header names.\r\n *\r\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\r\n * and the default header name is `X-XSRF-TOKEN`.\r\n *\r\n * @publicApi\r\n */\nclass HttpClientXsrfModule {\n  /**\r\n   * Disable the default XSRF protection.\r\n   */\n  static disable() {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [withNoXsrfProtection().Éµproviders]\n    };\n  }\n  /**\r\n   * Configure XSRF protection.\r\n   * @param options An object that can specify either or both\r\n   * cookie name or header name.\r\n   * - Cookie name default is `XSRF-TOKEN`.\r\n   * - Header name default is `X-XSRF-TOKEN`.\r\n   *\r\n   */\n  static withOptions(options = {}) {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: withXsrfConfiguration(options).Éµproviders\n    };\n  }\n}\nHttpClientXsrfModule.Éµfac = function HttpClientXsrfModule_Factory(t) {\n  return new (t || HttpClientXsrfModule)();\n};\nHttpClientXsrfModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n  type: HttpClientXsrfModule\n});\nHttpClientXsrfModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({\n  providers: [HttpXsrfInterceptor, {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpXsrfInterceptor,\n    multi: true\n  }, {\n    provide: HttpXsrfTokenExtractor,\n    useClass: HttpXsrfCookieExtractor\n  }, withXsrfConfiguration({\n    cookieName: XSRF_DEFAULT_COOKIE_NAME,\n    headerName: XSRF_DEFAULT_HEADER_NAME\n  }).Éµproviders, {\n    provide: XSRF_ENABLED,\n    useValue: true\n  }]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpClientXsrfModule, [{\n    type: NgModule,\n    args: [{\n      providers: [HttpXsrfInterceptor, {\n        provide: HTTP_INTERCEPTORS,\n        useExisting: HttpXsrfInterceptor,\n        multi: true\n      }, {\n        provide: HttpXsrfTokenExtractor,\n        useClass: HttpXsrfCookieExtractor\n      }, withXsrfConfiguration({\n        cookieName: XSRF_DEFAULT_COOKIE_NAME,\n        headerName: XSRF_DEFAULT_HEADER_NAME\n      }).Éµproviders, {\n        provide: XSRF_ENABLED,\n        useValue: true\n      }]\n    }]\n  }], null, null);\n})();\n/**\r\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\r\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\r\n *\r\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\r\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\r\n *\r\n * @publicApi\r\n */\nclass HttpClientModule {}\nHttpClientModule.Éµfac = function HttpClientModule_Factory(t) {\n  return new (t || HttpClientModule)();\n};\nHttpClientModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n  type: HttpClientModule\n});\nHttpClientModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({\n  providers: [provideHttpClient(withInterceptorsFromDi(), withXsrfConfiguration({\n    cookieName: XSRF_DEFAULT_COOKIE_NAME,\n    headerName: XSRF_DEFAULT_HEADER_NAME\n  }))]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpClientModule, [{\n    type: NgModule,\n    args: [{\n      /**\r\n       * Configures the [dependency injector](guide/glossary#injector) where it is imported\r\n       * with supporting services for HTTP communications.\r\n       */\n      providers: [provideHttpClient(withInterceptorsFromDi(), withXsrfConfiguration({\n        cookieName: XSRF_DEFAULT_COOKIE_NAME,\n        headerName: XSRF_DEFAULT_HEADER_NAME\n      }))]\n    }]\n  }], null, null);\n})();\n/**\r\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\r\n * with supporting services for JSONP.\r\n * Without this module, Jsonp requests reach the backend\r\n * with method JSONP, where they are rejected.\r\n *\r\n * @publicApi\r\n */\nclass HttpClientJsonpModule {}\nHttpClientJsonpModule.Éµfac = function HttpClientJsonpModule_Factory(t) {\n  return new (t || HttpClientJsonpModule)();\n};\nHttpClientJsonpModule.Éµmod = /* @__PURE__ */i0.ÉµÉµdefineNgModule({\n  type: HttpClientJsonpModule\n});\nHttpClientJsonpModule.Éµinj = /* @__PURE__ */i0.ÉµÉµdefineInjector({\n  providers: [withJsonpSupport().Éµproviders]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ÉµsetClassMetadata(HttpClientJsonpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [withJsonpSupport().Éµproviders]\n    }]\n  }], null, null);\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * A wrapper around the `XMLHttpRequest` constructor.\r\n *\r\n * @publicApi\r\n * @see `XhrFactory`\r\n * @deprecated\r\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\r\n */\nconst XhrFactory = XhrFactory$1;\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, provideHttpClient, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration, HttpInterceptorHandler as ÉµHttpInterceptingHandler, HttpInterceptorHandler as ÉµHttpInterceptorHandler };","map":{"version":3,"names":["i1","DOCUMENT","ÉµparseCookieValue","XhrFactory","XhrFactory$1","i0","Injectable","InjectionToken","inject","Inject","PLATFORM_ID","makeEnvironmentProviders","NgModule","of","Observable","concatMap","filter","map","HttpHandler","HttpBackend","HttpHeaders","constructor","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","ngDevMode","assertValidHeaders","Object","keys","values","length","init","Array","from","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","existing","fn","entries","isArray","Error","HttpUrlEncodingCodec","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","paramParser","rawParams","codec","params","replace","param","eqIdx","val","list","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","v","encodeURIComponent","s","t","valueToString","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","res","appendAll","_value","toString","eKey","join","idx","splice","HttpContextToken","defaultValue","HttpContext","token","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","isUrlSearchParams","URLSearchParams","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","context","urlWithParams","qIdx","sep","serializeBody","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","request","first","req","events$","pipe","handle","res$","event","head","jsonp","callbackParam","patch","post","put","Éµfac","Éµprov","interceptorChainEndFn","finalHandlerFn","adaptLegacyInterceptorToChain","chainTailFn","interceptor","initialRequest","intercept","downstreamRequest","chainedInterceptorFn","interceptorFn","injector","runInContext","HTTP_INTERCEPTORS","HTTP_INTERCEPTOR_FNS","legacyInterceptorFnFactory","chain","interceptors","optional","reduceRight","HttpInterceptorHandler","backend","dedupedInterceptorFns","Set","nextSequencedFn","EnvironmentInjector","nextRequestId","foreignDocument","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JSONP_ERR_HEADERS_NOT_SUPPORTED","JsonpCallbackContext","jsonpCallbackContext","window","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","nextCallback","observer","callback","node","createElement","src","finished","data","cleanup","parentNode","removeChild","onLoad","then","next","complete","onError","addEventListener","appendChild","Sent","removeListeners","script","implementation","createHTMLDocument","adoptNode","decorators","args","jsonpInterceptorFn","JsonpInterceptor","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","HttpXhrBackend","xhrFactory","build","open","setRequestHeader","detectedType","reqBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","removeEventListener","readyState","DONE","abort","XSRF_ENABLED","XSRF_DEFAULT_COOKIE_NAME","XSRF_COOKIE_NAME","providedIn","factory","XSRF_DEFAULT_HEADER_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","xsrfInterceptorFn","lcUrl","startsWith","headerName","HttpXsrfInterceptor","HttpFeatureKind","makeHttpFeature","kind","providers","Éµkind","Éµproviders","provideHttpClient","features","featureKinds","f","NoXsrfProtection","CustomXsrfConfiguration","provide","useExisting","useValue","multi","useClass","feature","withInterceptors","interceptorFns","Interceptors","LEGACY_INTERCEPTOR_FN","withInterceptorsFromDi","LegacyInterceptors","useFactory","withXsrfConfiguration","withNoXsrfProtection","withJsonpSupport","JsonpSupport","withRequestsMadeViaParent","RequestsMadeViaParent","handlerFromParent","skipSelf","HttpClientXsrfModule","disable","ngModule","withOptions","Éµmod","Éµinj","HttpClientModule","HttpClientJsonpModule","ÉµHttpInterceptingHandler","ÉµHttpInterceptorHandler"],"sources":["C:/Users/Noril/Documents/team3990/node_modules/@angular/common/fesm2020/http.mjs"],"sourcesContent":["/**\r\n * @license Angular v15.0.4\r\n * (c) 2010-2022 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport * as i1 from '@angular/common';\r\nimport { DOCUMENT, ÉµparseCookieValue, XhrFactory as XhrFactory$1 } from '@angular/common';\r\nimport * as i0 from '@angular/core';\r\nimport { Injectable, InjectionToken, inject, Inject, PLATFORM_ID, makeEnvironmentProviders, NgModule } from '@angular/core';\r\nimport { of, Observable } from 'rxjs';\r\nimport { concatMap, filter, map } from 'rxjs/operators';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\r\n * `HttpResponse`.\r\n *\r\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\r\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\r\n * `HttpBackend`.\r\n *\r\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpHandler {\r\n}\r\n/**\r\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\r\n *\r\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\r\n *\r\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\r\n * through the interceptor chain.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpBackend {\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Represents the header configuration options for an HTTP request.\r\n * Instances are immutable. Modifying methods return a cloned\r\n * instance with the change. The original object is never changed.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpHeaders {\r\n    /**  Constructs a new HTTP header object with the given values.*/\r\n    constructor(headers) {\r\n        /**\r\n         * Internal map of lowercased header names to the normalized\r\n         * form of the name (the form seen first).\r\n         */\r\n        this.normalizedNames = new Map();\r\n        /**\r\n         * Queued updates to be materialized the next initialization.\r\n         */\r\n        this.lazyUpdate = null;\r\n        if (!headers) {\r\n            this.headers = new Map();\r\n        }\r\n        else if (typeof headers === 'string') {\r\n            this.lazyInit = () => {\r\n                this.headers = new Map();\r\n                headers.split('\\n').forEach(line => {\r\n                    const index = line.indexOf(':');\r\n                    if (index > 0) {\r\n                        const name = line.slice(0, index);\r\n                        const key = name.toLowerCase();\r\n                        const value = line.slice(index + 1).trim();\r\n                        this.maybeSetNormalizedName(name, key);\r\n                        if (this.headers.has(key)) {\r\n                            this.headers.get(key).push(value);\r\n                        }\r\n                        else {\r\n                            this.headers.set(key, [value]);\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n        }\r\n        else {\r\n            this.lazyInit = () => {\r\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n                    assertValidHeaders(headers);\r\n                }\r\n                this.headers = new Map();\r\n                Object.keys(headers).forEach(name => {\r\n                    let values = headers[name];\r\n                    const key = name.toLowerCase();\r\n                    if (typeof values === 'string') {\r\n                        values = [values];\r\n                    }\r\n                    if (values.length > 0) {\r\n                        this.headers.set(key, values);\r\n                        this.maybeSetNormalizedName(name, key);\r\n                    }\r\n                });\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Checks for existence of a given header.\r\n     *\r\n     * @param name The header name to check for existence.\r\n     *\r\n     * @returns True if the header exists, false otherwise.\r\n     */\r\n    has(name) {\r\n        this.init();\r\n        return this.headers.has(name.toLowerCase());\r\n    }\r\n    /**\r\n     * Retrieves the first value of a given header.\r\n     *\r\n     * @param name The header name.\r\n     *\r\n     * @returns The value string if the header exists, null otherwise\r\n     */\r\n    get(name) {\r\n        this.init();\r\n        const values = this.headers.get(name.toLowerCase());\r\n        return values && values.length > 0 ? values[0] : null;\r\n    }\r\n    /**\r\n     * Retrieves the names of the headers.\r\n     *\r\n     * @returns A list of header names.\r\n     */\r\n    keys() {\r\n        this.init();\r\n        return Array.from(this.normalizedNames.values());\r\n    }\r\n    /**\r\n     * Retrieves a list of values for a given header.\r\n     *\r\n     * @param name The header name from which to retrieve values.\r\n     *\r\n     * @returns A string of values if the header exists, null otherwise.\r\n     */\r\n    getAll(name) {\r\n        this.init();\r\n        return this.headers.get(name.toLowerCase()) || null;\r\n    }\r\n    /**\r\n     * Appends a new value to the existing set of values for a header\r\n     * and returns them in a clone of the original instance.\r\n     *\r\n     * @param name The header name for which to append the values.\r\n     * @param value The value to append.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\r\n     */\r\n    append(name, value) {\r\n        return this.clone({ name, value, op: 'a' });\r\n    }\r\n    /**\r\n     * Sets or modifies a value for a given header in a clone of the original instance.\r\n     * If the header already exists, its value is replaced with the given value\r\n     * in the returned object.\r\n     *\r\n     * @param name The header name.\r\n     * @param value The value or values to set or override for the given header.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the newly set header value.\r\n     */\r\n    set(name, value) {\r\n        return this.clone({ name, value, op: 's' });\r\n    }\r\n    /**\r\n     * Deletes values for a given header in a clone of the original instance.\r\n     *\r\n     * @param name The header name.\r\n     * @param value The value or values to delete for the given header.\r\n     *\r\n     * @returns A clone of the HTTP headers object with the given value deleted.\r\n     */\r\n    delete(name, value) {\r\n        return this.clone({ name, value, op: 'd' });\r\n    }\r\n    maybeSetNormalizedName(name, lcName) {\r\n        if (!this.normalizedNames.has(lcName)) {\r\n            this.normalizedNames.set(lcName, name);\r\n        }\r\n    }\r\n    init() {\r\n        if (!!this.lazyInit) {\r\n            if (this.lazyInit instanceof HttpHeaders) {\r\n                this.copyFrom(this.lazyInit);\r\n            }\r\n            else {\r\n                this.lazyInit();\r\n            }\r\n            this.lazyInit = null;\r\n            if (!!this.lazyUpdate) {\r\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\r\n                this.lazyUpdate = null;\r\n            }\r\n        }\r\n    }\r\n    copyFrom(other) {\r\n        other.init();\r\n        Array.from(other.headers.keys()).forEach(key => {\r\n            this.headers.set(key, other.headers.get(key));\r\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\r\n        });\r\n    }\r\n    clone(update) {\r\n        const clone = new HttpHeaders();\r\n        clone.lazyInit =\r\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\r\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\r\n        return clone;\r\n    }\r\n    applyUpdate(update) {\r\n        const key = update.name.toLowerCase();\r\n        switch (update.op) {\r\n            case 'a':\r\n            case 's':\r\n                let value = update.value;\r\n                if (typeof value === 'string') {\r\n                    value = [value];\r\n                }\r\n                if (value.length === 0) {\r\n                    return;\r\n                }\r\n                this.maybeSetNormalizedName(update.name, key);\r\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\r\n                base.push(...value);\r\n                this.headers.set(key, base);\r\n                break;\r\n            case 'd':\r\n                const toDelete = update.value;\r\n                if (!toDelete) {\r\n                    this.headers.delete(key);\r\n                    this.normalizedNames.delete(key);\r\n                }\r\n                else {\r\n                    let existing = this.headers.get(key);\r\n                    if (!existing) {\r\n                        return;\r\n                    }\r\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\r\n                    if (existing.length === 0) {\r\n                        this.headers.delete(key);\r\n                        this.normalizedNames.delete(key);\r\n                    }\r\n                    else {\r\n                        this.headers.set(key, existing);\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    forEach(fn) {\r\n        this.init();\r\n        Array.from(this.normalizedNames.keys())\r\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\r\n    }\r\n}\r\n/**\r\n * Verifies that the headers object has the right shape: the values\r\n * must be either strings or arrays. Throws an error if an invalid\r\n * header value is present.\r\n */\r\nfunction assertValidHeaders(headers) {\r\n    for (const [key, value] of Object.entries(headers)) {\r\n        if (typeof value !== 'string' && !Array.isArray(value)) {\r\n            throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` +\r\n                `Expecting either a string or an array, but got: \\`${value}\\`.`);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Provides encoding and decoding of URL parameter and query-string values.\r\n *\r\n * Serializes and parses URL parameter keys and values to encode and decode them.\r\n * If you pass URL query parameters without encoding,\r\n * the query parameters can be misinterpreted at the receiving end.\r\n *\r\n *\r\n * @publicApi\r\n */\r\nclass HttpUrlEncodingCodec {\r\n    /**\r\n     * Encodes a key name for a URL parameter or query-string.\r\n     * @param key The key name.\r\n     * @returns The encoded key name.\r\n     */\r\n    encodeKey(key) {\r\n        return standardEncoding(key);\r\n    }\r\n    /**\r\n     * Encodes the value of a URL parameter or query-string.\r\n     * @param value The value.\r\n     * @returns The encoded value.\r\n     */\r\n    encodeValue(value) {\r\n        return standardEncoding(value);\r\n    }\r\n    /**\r\n     * Decodes an encoded URL parameter or query-string key.\r\n     * @param key The encoded key name.\r\n     * @returns The decoded key name.\r\n     */\r\n    decodeKey(key) {\r\n        return decodeURIComponent(key);\r\n    }\r\n    /**\r\n     * Decodes an encoded URL parameter or query-string value.\r\n     * @param value The encoded value.\r\n     * @returns The decoded value.\r\n     */\r\n    decodeValue(value) {\r\n        return decodeURIComponent(value);\r\n    }\r\n}\r\nfunction paramParser(rawParams, codec) {\r\n    const map = new Map();\r\n    if (rawParams.length > 0) {\r\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\r\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\r\n        // may start with the `?` char, so we strip it if it's present.\r\n        const params = rawParams.replace(/^\\?/, '').split('&');\r\n        params.forEach((param) => {\r\n            const eqIdx = param.indexOf('=');\r\n            const [key, val] = eqIdx == -1 ?\r\n                [codec.decodeKey(param), ''] :\r\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\r\n            const list = map.get(key) || [];\r\n            list.push(val);\r\n            map.set(key, list);\r\n        });\r\n    }\r\n    return map;\r\n}\r\n/**\r\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\r\n */\r\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\r\nconst STANDARD_ENCODING_REPLACEMENTS = {\r\n    '40': '@',\r\n    '3A': ':',\r\n    '24': '$',\r\n    '2C': ',',\r\n    '3B': ';',\r\n    '3D': '=',\r\n    '3F': '?',\r\n    '2F': '/',\r\n};\r\nfunction standardEncoding(v) {\r\n    return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\r\n}\r\nfunction valueToString(value) {\r\n    return `${value}`;\r\n}\r\n/**\r\n * An HTTP request/response body that represents serialized parameters,\r\n * per the MIME type `application/x-www-form-urlencoded`.\r\n *\r\n * This class is immutable; all mutation operations return a new instance.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpParams {\r\n    constructor(options = {}) {\r\n        this.updates = null;\r\n        this.cloneFrom = null;\r\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\r\n        if (!!options.fromString) {\r\n            if (!!options.fromObject) {\r\n                throw new Error(`Cannot specify both fromString and fromObject.`);\r\n            }\r\n            this.map = paramParser(options.fromString, this.encoder);\r\n        }\r\n        else if (!!options.fromObject) {\r\n            this.map = new Map();\r\n            Object.keys(options.fromObject).forEach(key => {\r\n                const value = options.fromObject[key];\r\n                // convert the values to strings\r\n                const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\r\n                this.map.set(key, values);\r\n            });\r\n        }\r\n        else {\r\n            this.map = null;\r\n        }\r\n    }\r\n    /**\r\n     * Reports whether the body includes one or more values for a given parameter.\r\n     * @param param The parameter name.\r\n     * @returns True if the parameter has one or more values,\r\n     * false if it has no value or is not present.\r\n     */\r\n    has(param) {\r\n        this.init();\r\n        return this.map.has(param);\r\n    }\r\n    /**\r\n     * Retrieves the first value for a parameter.\r\n     * @param param The parameter name.\r\n     * @returns The first value of the given parameter,\r\n     * or `null` if the parameter is not present.\r\n     */\r\n    get(param) {\r\n        this.init();\r\n        const res = this.map.get(param);\r\n        return !!res ? res[0] : null;\r\n    }\r\n    /**\r\n     * Retrieves all values for a  parameter.\r\n     * @param param The parameter name.\r\n     * @returns All values in a string array,\r\n     * or `null` if the parameter not present.\r\n     */\r\n    getAll(param) {\r\n        this.init();\r\n        return this.map.get(param) || null;\r\n    }\r\n    /**\r\n     * Retrieves all the parameters for this body.\r\n     * @returns The parameter names in a string array.\r\n     */\r\n    keys() {\r\n        this.init();\r\n        return Array.from(this.map.keys());\r\n    }\r\n    /**\r\n     * Appends a new value to existing values for a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The new value to add.\r\n     * @return A new body with the appended value.\r\n     */\r\n    append(param, value) {\r\n        return this.clone({ param, value, op: 'a' });\r\n    }\r\n    /**\r\n     * Constructs a new body with appended values for the given parameter name.\r\n     * @param params parameters and values\r\n     * @return A new body with the new value.\r\n     */\r\n    appendAll(params) {\r\n        const updates = [];\r\n        Object.keys(params).forEach(param => {\r\n            const value = params[param];\r\n            if (Array.isArray(value)) {\r\n                value.forEach(_value => {\r\n                    updates.push({ param, value: _value, op: 'a' });\r\n                });\r\n            }\r\n            else {\r\n                updates.push({ param, value: value, op: 'a' });\r\n            }\r\n        });\r\n        return this.clone(updates);\r\n    }\r\n    /**\r\n     * Replaces the value for a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The new value.\r\n     * @return A new body with the new value.\r\n     */\r\n    set(param, value) {\r\n        return this.clone({ param, value, op: 's' });\r\n    }\r\n    /**\r\n     * Removes a given value or all values from a parameter.\r\n     * @param param The parameter name.\r\n     * @param value The value to remove, if provided.\r\n     * @return A new body with the given value removed, or with all values\r\n     * removed if no value is specified.\r\n     */\r\n    delete(param, value) {\r\n        return this.clone({ param, value, op: 'd' });\r\n    }\r\n    /**\r\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\r\n     * separated by `&`s.\r\n     */\r\n    toString() {\r\n        this.init();\r\n        return this.keys()\r\n            .map(key => {\r\n            const eKey = this.encoder.encodeKey(key);\r\n            // `a: ['1']` produces `'a=1'`\r\n            // `b: []` produces `''`\r\n            // `c: ['1', '2']` produces `'c=1&c=2'`\r\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\r\n                .join('&');\r\n        })\r\n            // filter out empty values because `b: []` produces `''`\r\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\r\n            .filter(param => param !== '')\r\n            .join('&');\r\n    }\r\n    clone(update) {\r\n        const clone = new HttpParams({ encoder: this.encoder });\r\n        clone.cloneFrom = this.cloneFrom || this;\r\n        clone.updates = (this.updates || []).concat(update);\r\n        return clone;\r\n    }\r\n    init() {\r\n        if (this.map === null) {\r\n            this.map = new Map();\r\n        }\r\n        if (this.cloneFrom !== null) {\r\n            this.cloneFrom.init();\r\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\r\n            this.updates.forEach(update => {\r\n                switch (update.op) {\r\n                    case 'a':\r\n                    case 's':\r\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\r\n                        base.push(valueToString(update.value));\r\n                        this.map.set(update.param, base);\r\n                        break;\r\n                    case 'd':\r\n                        if (update.value !== undefined) {\r\n                            let base = this.map.get(update.param) || [];\r\n                            const idx = base.indexOf(valueToString(update.value));\r\n                            if (idx !== -1) {\r\n                                base.splice(idx, 1);\r\n                            }\r\n                            if (base.length > 0) {\r\n                                this.map.set(update.param, base);\r\n                            }\r\n                            else {\r\n                                this.map.delete(update.param);\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.map.delete(update.param);\r\n                            break;\r\n                        }\r\n                }\r\n            });\r\n            this.cloneFrom = this.updates = null;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A token used to manipulate and access values stored in `HttpContext`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpContextToken {\r\n    constructor(defaultValue) {\r\n        this.defaultValue = defaultValue;\r\n    }\r\n}\r\n/**\r\n * Http context stores arbitrary user defined values and ensures type safety without\r\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\r\n *\r\n * This context is mutable and is shared between cloned requests unless explicitly specified.\r\n *\r\n * @usageNotes\r\n *\r\n * ### Usage Example\r\n *\r\n * ```typescript\r\n * // inside cache.interceptors.ts\r\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\r\n *\r\n * export class CacheInterceptor implements HttpInterceptor {\r\n *\r\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\r\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\r\n *       return ...;\r\n *     }\r\n *     return delegate.handle(req);\r\n *   }\r\n * }\r\n *\r\n * // inside a service\r\n *\r\n * this.httpClient.get('/api/weather', {\r\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\r\n * }).subscribe(...);\r\n * ```\r\n *\r\n * @publicApi\r\n */\r\nclass HttpContext {\r\n    constructor() {\r\n        this.map = new Map();\r\n    }\r\n    /**\r\n     * Store a value in the context. If a value is already present it will be overwritten.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     * @param value The value to store.\r\n     *\r\n     * @returns A reference to itself for easy chaining.\r\n     */\r\n    set(token, value) {\r\n        this.map.set(token, value);\r\n        return this;\r\n    }\r\n    /**\r\n     * Retrieve the value associated with the given token.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     *\r\n     * @returns The stored value or default if one is defined.\r\n     */\r\n    get(token) {\r\n        if (!this.map.has(token)) {\r\n            this.map.set(token, token.defaultValue());\r\n        }\r\n        return this.map.get(token);\r\n    }\r\n    /**\r\n     * Delete the value associated with the given token.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     *\r\n     * @returns A reference to itself for easy chaining.\r\n     */\r\n    delete(token) {\r\n        this.map.delete(token);\r\n        return this;\r\n    }\r\n    /**\r\n     * Checks for existence of a given token.\r\n     *\r\n     * @param token The reference to an instance of `HttpContextToken`.\r\n     *\r\n     * @returns True if the token exists, false otherwise.\r\n     */\r\n    has(token) {\r\n        return this.map.has(token);\r\n    }\r\n    /**\r\n     * @returns a list of tokens currently stored in the context.\r\n     */\r\n    keys() {\r\n        return this.map.keys();\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Determine whether the given HTTP method may include a body.\r\n */\r\nfunction mightHaveBody(method) {\r\n    switch (method) {\r\n        case 'DELETE':\r\n        case 'GET':\r\n        case 'HEAD':\r\n        case 'OPTIONS':\r\n        case 'JSONP':\r\n            return false;\r\n        default:\r\n            return true;\r\n    }\r\n}\r\n/**\r\n * Safely assert whether the given value is an ArrayBuffer.\r\n *\r\n * In some execution environments ArrayBuffer is not defined.\r\n */\r\nfunction isArrayBuffer(value) {\r\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\r\n}\r\n/**\r\n * Safely assert whether the given value is a Blob.\r\n *\r\n * In some execution environments Blob is not defined.\r\n */\r\nfunction isBlob(value) {\r\n    return typeof Blob !== 'undefined' && value instanceof Blob;\r\n}\r\n/**\r\n * Safely assert whether the given value is a FormData instance.\r\n *\r\n * In some execution environments FormData is not defined.\r\n */\r\nfunction isFormData(value) {\r\n    return typeof FormData !== 'undefined' && value instanceof FormData;\r\n}\r\n/**\r\n * Safely assert whether the given value is a URLSearchParams instance.\r\n *\r\n * In some execution environments URLSearchParams is not defined.\r\n */\r\nfunction isUrlSearchParams(value) {\r\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\r\n}\r\n/**\r\n * An outgoing HTTP request with an optional typed body.\r\n *\r\n * `HttpRequest` represents an outgoing request, including URL, method,\r\n * headers, body, and other request configuration options. Instances should be\r\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\r\n * method should be used.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpRequest {\r\n    constructor(method, url, third, fourth) {\r\n        this.url = url;\r\n        /**\r\n         * The request body, or `null` if one isn't set.\r\n         *\r\n         * Bodies are not enforced to be immutable, as they can include a reference to any\r\n         * user-defined data type. However, interceptors should take care to preserve\r\n         * idempotence by treating them as such.\r\n         */\r\n        this.body = null;\r\n        /**\r\n         * Whether this request should be made in a way that exposes progress events.\r\n         *\r\n         * Progress events are expensive (change detection runs on each event) and so\r\n         * they should only be requested if the consumer intends to monitor them.\r\n         */\r\n        this.reportProgress = false;\r\n        /**\r\n         * Whether this request should be sent with outgoing credentials (cookies).\r\n         */\r\n        this.withCredentials = false;\r\n        /**\r\n         * The expected response type of the server.\r\n         *\r\n         * This is used to parse the response appropriately before returning it to\r\n         * the requestee.\r\n         */\r\n        this.responseType = 'json';\r\n        this.method = method.toUpperCase();\r\n        // Next, need to figure out which argument holds the HttpRequestInit\r\n        // options, if any.\r\n        let options;\r\n        // Check whether a body argument is expected. The only valid way to omit\r\n        // the body argument is to use a known no-body method like GET.\r\n        if (mightHaveBody(this.method) || !!fourth) {\r\n            // Body is the third argument, options are the fourth.\r\n            this.body = (third !== undefined) ? third : null;\r\n            options = fourth;\r\n        }\r\n        else {\r\n            // No body required, options are the third argument. The body stays null.\r\n            options = third;\r\n        }\r\n        // If options have been passed, interpret them.\r\n        if (options) {\r\n            // Normalize reportProgress and withCredentials.\r\n            this.reportProgress = !!options.reportProgress;\r\n            this.withCredentials = !!options.withCredentials;\r\n            // Override default response type of 'json' if one is provided.\r\n            if (!!options.responseType) {\r\n                this.responseType = options.responseType;\r\n            }\r\n            // Override headers if they're provided.\r\n            if (!!options.headers) {\r\n                this.headers = options.headers;\r\n            }\r\n            if (!!options.context) {\r\n                this.context = options.context;\r\n            }\r\n            if (!!options.params) {\r\n                this.params = options.params;\r\n            }\r\n        }\r\n        // If no headers have been passed in, construct a new HttpHeaders instance.\r\n        if (!this.headers) {\r\n            this.headers = new HttpHeaders();\r\n        }\r\n        // If no context have been passed in, construct a new HttpContext instance.\r\n        if (!this.context) {\r\n            this.context = new HttpContext();\r\n        }\r\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\r\n        if (!this.params) {\r\n            this.params = new HttpParams();\r\n            this.urlWithParams = url;\r\n        }\r\n        else {\r\n            // Encode the parameters to a string in preparation for inclusion in the URL.\r\n            const params = this.params.toString();\r\n            if (params.length === 0) {\r\n                // No parameters, the visible URL is just the URL given at creation time.\r\n                this.urlWithParams = url;\r\n            }\r\n            else {\r\n                // Does the URL already have query parameters? Look for '?'.\r\n                const qIdx = url.indexOf('?');\r\n                // There are 3 cases to handle:\r\n                // 1) No existing parameters -> append '?' followed by params.\r\n                // 2) '?' exists and is followed by existing query string ->\r\n                //    append '&' followed by params.\r\n                // 3) '?' exists at the end of the url -> append params directly.\r\n                // This basically amounts to determining the character, if any, with\r\n                // which to join the URL and parameters.\r\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\r\n                this.urlWithParams = url + sep + params;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Transform the free-form body into a serialized format suitable for\r\n     * transmission to the server.\r\n     */\r\n    serializeBody() {\r\n        // If no body is present, no need to serialize it.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // Check whether the body is already in a serialized form. If so,\r\n        // it can just be returned directly.\r\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\r\n            isUrlSearchParams(this.body) || typeof this.body === 'string') {\r\n            return this.body;\r\n        }\r\n        // Check whether the body is an instance of HttpUrlEncodedParams.\r\n        if (this.body instanceof HttpParams) {\r\n            return this.body.toString();\r\n        }\r\n        // Check whether the body is an object or array, and serialize with JSON if so.\r\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\r\n            Array.isArray(this.body)) {\r\n            return JSON.stringify(this.body);\r\n        }\r\n        // Fall back on toString() for everything else.\r\n        return this.body.toString();\r\n    }\r\n    /**\r\n     * Examine the body and attempt to infer an appropriate MIME type\r\n     * for it.\r\n     *\r\n     * If no such type can be inferred, this method will return `null`.\r\n     */\r\n    detectContentTypeHeader() {\r\n        // An empty body has no content type.\r\n        if (this.body === null) {\r\n            return null;\r\n        }\r\n        // FormData bodies rely on the browser's content type assignment.\r\n        if (isFormData(this.body)) {\r\n            return null;\r\n        }\r\n        // Blobs usually have their own content type. If it doesn't, then\r\n        // no type can be inferred.\r\n        if (isBlob(this.body)) {\r\n            return this.body.type || null;\r\n        }\r\n        // Array buffers have unknown contents and thus no type can be inferred.\r\n        if (isArrayBuffer(this.body)) {\r\n            return null;\r\n        }\r\n        // Technically, strings could be a form of JSON data, but it's safe enough\r\n        // to assume they're plain strings.\r\n        if (typeof this.body === 'string') {\r\n            return 'text/plain';\r\n        }\r\n        // `HttpUrlEncodedParams` has its own content-type.\r\n        if (this.body instanceof HttpParams) {\r\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\r\n        }\r\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\r\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\r\n            typeof this.body === 'boolean') {\r\n            return 'application/json';\r\n        }\r\n        // No type could be inferred.\r\n        return null;\r\n    }\r\n    clone(update = {}) {\r\n        // For method, url, and responseType, take the current value unless\r\n        // it is overridden in the update hash.\r\n        const method = update.method || this.method;\r\n        const url = update.url || this.url;\r\n        const responseType = update.responseType || this.responseType;\r\n        // The body is somewhat special - a `null` value in update.body means\r\n        // whatever current body is present is being overridden with an empty\r\n        // body, whereas an `undefined` value in update.body implies no\r\n        // override.\r\n        const body = (update.body !== undefined) ? update.body : this.body;\r\n        // Carefully handle the boolean options to differentiate between\r\n        // `false` and `undefined` in the update args.\r\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\r\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\r\n        // Headers and params may be appended to if `setHeaders` or\r\n        // `setParams` are used.\r\n        let headers = update.headers || this.headers;\r\n        let params = update.params || this.params;\r\n        // Pass on context if needed\r\n        const context = update.context ?? this.context;\r\n        // Check whether the caller has asked to add headers.\r\n        if (update.setHeaders !== undefined) {\r\n            // Set every requested header.\r\n            headers =\r\n                Object.keys(update.setHeaders)\r\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\r\n        }\r\n        // Check whether the caller has asked to set params.\r\n        if (update.setParams) {\r\n            // Set every requested param.\r\n            params = Object.keys(update.setParams)\r\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\r\n        }\r\n        // Finally, construct the new HttpRequest using the pieces from above.\r\n        return new HttpRequest(method, url, body, {\r\n            params,\r\n            headers,\r\n            context,\r\n            reportProgress,\r\n            responseType,\r\n            withCredentials,\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Type enumeration for the different kinds of `HttpEvent`.\r\n *\r\n * @publicApi\r\n */\r\nvar HttpEventType;\r\n(function (HttpEventType) {\r\n    /**\r\n     * The request was sent out over the wire.\r\n     */\r\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\r\n    /**\r\n     * An upload progress event was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\r\n    /**\r\n     * The response status code and headers were received.\r\n     */\r\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\r\n    /**\r\n     * A download progress event was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\r\n    /**\r\n     * The full response including the body was received.\r\n     */\r\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\r\n    /**\r\n     * A custom event from an interceptor or a backend.\r\n     */\r\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\r\n})(HttpEventType || (HttpEventType = {}));\r\n/**\r\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpResponseBase {\r\n    /**\r\n     * Super-constructor for all responses.\r\n     *\r\n     * The single parameter accepted is an initialization hash. Any properties\r\n     * of the response passed there will override the default values.\r\n     */\r\n    constructor(init, defaultStatus = 200 /* HttpStatusCode.Ok */, defaultStatusText = 'OK') {\r\n        // If the hash has values passed, use them to initialize the response.\r\n        // Otherwise use the default values.\r\n        this.headers = init.headers || new HttpHeaders();\r\n        this.status = init.status !== undefined ? init.status : defaultStatus;\r\n        this.statusText = init.statusText || defaultStatusText;\r\n        this.url = init.url || null;\r\n        // Cache the ok value to avoid defining a getter.\r\n        this.ok = this.status >= 200 && this.status < 300;\r\n    }\r\n}\r\n/**\r\n * A partial HTTP response which only includes the status and header data,\r\n * but no response body.\r\n *\r\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\r\n * event stream, only when progress events are requested.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpHeaderResponse extends HttpResponseBase {\r\n    /**\r\n     * Create a new `HttpHeaderResponse` with the given parameters.\r\n     */\r\n    constructor(init = {}) {\r\n        super(init);\r\n        this.type = HttpEventType.ResponseHeader;\r\n    }\r\n    /**\r\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\r\n     * given parameter hash.\r\n     */\r\n    clone(update = {}) {\r\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\r\n        // overriding the current parameters with new ones if given.\r\n        return new HttpHeaderResponse({\r\n            headers: update.headers || this.headers,\r\n            status: update.status !== undefined ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    }\r\n}\r\n/**\r\n * A full HTTP response, including a typed response body (which may be `null`\r\n * if one was not returned).\r\n *\r\n * `HttpResponse` is a `HttpEvent` available on the response event\r\n * stream.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpResponse extends HttpResponseBase {\r\n    /**\r\n     * Construct a new `HttpResponse`.\r\n     */\r\n    constructor(init = {}) {\r\n        super(init);\r\n        this.type = HttpEventType.Response;\r\n        this.body = init.body !== undefined ? init.body : null;\r\n    }\r\n    clone(update = {}) {\r\n        return new HttpResponse({\r\n            body: (update.body !== undefined) ? update.body : this.body,\r\n            headers: update.headers || this.headers,\r\n            status: (update.status !== undefined) ? update.status : this.status,\r\n            statusText: update.statusText || this.statusText,\r\n            url: update.url || this.url || undefined,\r\n        });\r\n    }\r\n}\r\n/**\r\n * A response that represents an error or failure, either from a\r\n * non-successful HTTP status, an error while executing the request,\r\n * or some other failure which occurred during the parsing of the response.\r\n *\r\n * Any error returned on the `Observable` response stream will be\r\n * wrapped in an `HttpErrorResponse` to provide additional context about\r\n * the state of the HTTP layer when the error occurred. The error property\r\n * will contain either a wrapped Error object or the error response returned\r\n * from the server.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpErrorResponse extends HttpResponseBase {\r\n    constructor(init) {\r\n        // Initialize with a default status of 0 / Unknown Error.\r\n        super(init, 0, 'Unknown Error');\r\n        this.name = 'HttpErrorResponse';\r\n        /**\r\n         * Errors are never okay, even when the status code is in the 2xx success range.\r\n         */\r\n        this.ok = false;\r\n        // If the response was successful, then this was a parse error. Otherwise, it was\r\n        // a protocol-level failure of some sort. Either the request failed in transit\r\n        // or the server returned an unsuccessful status code.\r\n        if (this.status >= 200 && this.status < 300) {\r\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\r\n        }\r\n        else {\r\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\r\n        }\r\n        this.error = init.error || null;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\r\n * the given `body`. This function clones the object and adds the body.\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n *\r\n */\r\nfunction addBody(options, body) {\r\n    return {\r\n        body,\r\n        headers: options.headers,\r\n        context: options.context,\r\n        observe: options.observe,\r\n        params: options.params,\r\n        reportProgress: options.reportProgress,\r\n        responseType: options.responseType,\r\n        withCredentials: options.withCredentials,\r\n    };\r\n}\r\n/**\r\n * Performs HTTP requests.\r\n * This service is available as an injectable class, with methods to perform HTTP requests.\r\n * Each request method has multiple signatures, and the return type varies based on\r\n * the signature that is called (mainly the values of `observe` and `responseType`).\r\n *\r\n * Note that the `responseType` *options* value is a String that identifies the\r\n * single data type of the response.\r\n * A single overload version of the method handles each response type.\r\n * The value of `responseType` cannot be a union, as the combined signature could imply.\r\n\r\n *\r\n * @usageNotes\r\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/tour-of-heroes/toh-pt0) application.\r\n *\r\n * ### HTTP Request Example\r\n *\r\n * ```\r\n *  // GET heroes whose name contains search term\r\n * searchHeroes(term: string): observable<Hero[]>{\r\n *\r\n *  const params = new HttpParams({fromString: 'name=term'});\r\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\r\n * }\r\n * ```\r\n *\r\n * Alternatively, the parameter string can be used without invoking HttpParams\r\n * by directly joining to the URL.\r\n * ```\r\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\r\n * ```\r\n *\r\n *\r\n * ### JSONP Example\r\n * ```\r\n * requestJsonp(url, callback = 'callback') {\r\n *  return this.httpClient.jsonp(this.heroesURL, callback);\r\n * }\r\n * ```\r\n *\r\n * ### PATCH Example\r\n * ```\r\n * // PATCH one of the heroes' name\r\n * patchHero (id: number, heroName: string): Observable<{}> {\r\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\r\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\r\n *    .pipe(catchError(this.handleError('patchHero')));\r\n * }\r\n * ```\r\n *\r\n * @see [HTTP Guide](guide/http)\r\n * @see [HTTP Request](api/common/http/HttpRequest)\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClient {\r\n    constructor(handler) {\r\n        this.handler = handler;\r\n    }\r\n    /**\r\n     * Constructs an observable for a generic HTTP request that, when subscribed,\r\n     * fires the request through the chain of registered interceptors and on to the\r\n     * server.\r\n     *\r\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\r\n     * the call returns an observable of the raw `HttpEvent` stream.\r\n     *\r\n     * Alternatively you can pass an HTTP method as the first parameter,\r\n     * a URL string as the second, and an options hash containing the request body as the third.\r\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\r\n     * type of returned observable.\r\n     *   * The `responseType` value determines how a successful response body is parsed.\r\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\r\n     * object as a type parameter to the call.\r\n     *\r\n     * The `observe` value determines the return type, according to what you are interested in\r\n     * observing.\r\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\r\n     * progress events by default.\r\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\r\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\r\n     * parameter.\r\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\r\n     *\r\n     */\r\n    request(first, url, options = {}) {\r\n        let req;\r\n        // First, check whether the primary argument is an instance of `HttpRequest`.\r\n        if (first instanceof HttpRequest) {\r\n            // It is. The other arguments must be undefined (per the signatures) and can be\r\n            // ignored.\r\n            req = first;\r\n        }\r\n        else {\r\n            // It's a string, so it represents a URL. Construct a request based on it,\r\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\r\n            // provided.\r\n            // Figure out the headers.\r\n            let headers = undefined;\r\n            if (options.headers instanceof HttpHeaders) {\r\n                headers = options.headers;\r\n            }\r\n            else {\r\n                headers = new HttpHeaders(options.headers);\r\n            }\r\n            // Sort out parameters.\r\n            let params = undefined;\r\n            if (!!options.params) {\r\n                if (options.params instanceof HttpParams) {\r\n                    params = options.params;\r\n                }\r\n                else {\r\n                    params = new HttpParams({ fromObject: options.params });\r\n                }\r\n            }\r\n            // Construct the request.\r\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\r\n                headers,\r\n                context: options.context,\r\n                params,\r\n                reportProgress: options.reportProgress,\r\n                // By default, JSON is assumed to be returned for all calls.\r\n                responseType: options.responseType || 'json',\r\n                withCredentials: options.withCredentials,\r\n            });\r\n        }\r\n        // Start with an Observable.of() the initial request, and run the handler (which\r\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\r\n        // inside an Observable chain, which causes interceptors to be re-run on every\r\n        // subscription (this also makes retries re-run the handler, including interceptors).\r\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\r\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\r\n        // the only option is to get the event stream. Otherwise, return the event stream if\r\n        // that is what was requested.\r\n        if (first instanceof HttpRequest || options.observe === 'events') {\r\n            return events$;\r\n        }\r\n        // The requested stream contains either the full response or the body. In either\r\n        // case, the first step is to filter the event stream to extract a stream of\r\n        // responses(s).\r\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\r\n        // Decide which stream to return.\r\n        switch (options.observe || 'body') {\r\n            case 'body':\r\n                // The requested stream is the body. Map the response stream to the response\r\n                // body. This could be done more simply, but a misbehaving interceptor might\r\n                // transform the response body into a different format and ignore the requested\r\n                // responseType. Guard against this by validating that the response is of the\r\n                // requested type.\r\n                switch (req.responseType) {\r\n                    case 'arraybuffer':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is an ArrayBuffer.\r\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\r\n                                throw new Error('Response is not an ArrayBuffer.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'blob':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is a Blob.\r\n                            if (res.body !== null && !(res.body instanceof Blob)) {\r\n                                throw new Error('Response is not a Blob.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'text':\r\n                        return res$.pipe(map((res) => {\r\n                            // Validate that the body is a string.\r\n                            if (res.body !== null && typeof res.body !== 'string') {\r\n                                throw new Error('Response is not a string.');\r\n                            }\r\n                            return res.body;\r\n                        }));\r\n                    case 'json':\r\n                    default:\r\n                        // No validation needed for JSON responses, as they can be of any type.\r\n                        return res$.pipe(map((res) => res.body));\r\n                }\r\n            case 'response':\r\n                // The response stream was requested directly, so return it.\r\n                return res$;\r\n            default:\r\n                // Guard against new future observe types being added.\r\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\r\n        }\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `DELETE` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     *\r\n     * @param url     The endpoint URL.\r\n     * @param options The HTTP options to send with the request.\r\n     *\r\n     */\r\n    delete(url, options = {}) {\r\n        return this.request('DELETE', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `GET` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    get(url, options = {}) {\r\n        return this.request('GET', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `HEAD` request to execute on the server. The `HEAD` method returns\r\n     * meta information about the resource without transferring the\r\n     * resource itself. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    head(url, options = {}) {\r\n        return this.request('HEAD', url, options);\r\n    }\r\n    /**\r\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\r\n     * `JSONP` to be dispatched via the interceptor pipeline.\r\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\r\n     * API endpoints that don't support newer,\r\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\r\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\r\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\r\n     * application making the request.\r\n     * The endpoint API must support JSONP callback for JSONP requests to work.\r\n     * The resource API returns the JSON response wrapped in a callback function.\r\n     * You can pass the callback function name as one of the query parameters.\r\n     * Note that JSONP requests can only be used with `GET` requests.\r\n     *\r\n     * @param url The resource URL.\r\n     * @param callbackParam The callback function name.\r\n     *\r\n     */\r\n    jsonp(url, callbackParam) {\r\n        return this.request('JSONP', url, {\r\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\r\n            observe: 'body',\r\n            responseType: 'json',\r\n        });\r\n    }\r\n    /**\r\n     * Constructs an `Observable` that, when subscribed, causes the configured\r\n     * `OPTIONS` request to execute on the server. This method allows the client\r\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\r\n     * without implying a resource action. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    options(url, options = {}) {\r\n        return this.request('OPTIONS', url, options);\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `PATCH` request to execute on the server. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    patch(url, body, options = {}) {\r\n        return this.request('PATCH', url, addBody(options, body));\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `POST` request to execute on the server. The server responds with the location of\r\n     * the replaced resource. See the individual overloads for\r\n     * details on the return type.\r\n     */\r\n    post(url, body, options = {}) {\r\n        return this.request('POST', url, addBody(options, body));\r\n    }\r\n    /**\r\n     * Constructs an observable that, when subscribed, causes the configured\r\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\r\n     * with a new set of values.\r\n     * See the individual overloads for details on the return type.\r\n     */\r\n    put(url, body, options = {}) {\r\n        return this.request('PUT', url, addBody(options, body));\r\n    }\r\n}\r\nHttpClient.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpClient, deps: [{ token: HttpHandler }], target: i0.ÉµÉµFactoryTarget.Injectable });\r\nHttpClient.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpClient });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpClient, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: HttpHandler }]; } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nfunction interceptorChainEndFn(req, finalHandlerFn) {\r\n    return finalHandlerFn(req);\r\n}\r\n/**\r\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\r\n * `ChainedInterceptorFn` interface.\r\n */\r\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\r\n    return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\r\n        handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn),\r\n    });\r\n}\r\n/**\r\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\r\n * injector.\r\n */\r\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\r\n    // clang-format off\r\n    return (initialRequest, finalHandlerFn) => injector.runInContext(() => interceptorFn(initialRequest, downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)));\r\n    // clang-format on\r\n}\r\n/**\r\n * A multi-provider token that represents the array of registered\r\n * `HttpInterceptor` objects.\r\n *\r\n * @publicApi\r\n */\r\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\r\n/**\r\n * A multi-provided token of `HttpInterceptorFn`s.\r\n */\r\nconst HTTP_INTERCEPTOR_FNS = new InjectionToken('HTTP_INTERCEPTOR_FNS');\r\n/**\r\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\r\n * class-based interceptors and runs the request through it.\r\n */\r\nfunction legacyInterceptorFnFactory() {\r\n    let chain = null;\r\n    return (req, handler) => {\r\n        if (chain === null) {\r\n            const interceptors = inject(HTTP_INTERCEPTORS, { optional: true }) ?? [];\r\n            // Note: interceptors are wrapped right-to-left so that final execution order is\r\n            // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\r\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\r\n            // out.\r\n            chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\r\n        }\r\n        return chain(req, handler);\r\n    };\r\n}\r\nclass HttpInterceptorHandler extends HttpHandler {\r\n    constructor(backend, injector) {\r\n        super();\r\n        this.backend = backend;\r\n        this.injector = injector;\r\n        this.chain = null;\r\n    }\r\n    handle(initialRequest) {\r\n        if (this.chain === null) {\r\n            const dedupedInterceptorFns = Array.from(new Set(this.injector.get(HTTP_INTERCEPTOR_FNS)));\r\n            // Note: interceptors are wrapped right-to-left so that final execution order is\r\n            // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\r\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\r\n            // out.\r\n            this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);\r\n        }\r\n        return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest));\r\n    }\r\n}\r\nHttpInterceptorHandler.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpInterceptorHandler, deps: [{ token: HttpBackend }, { token: i0.EnvironmentInjector }], target: i0.ÉµÉµFactoryTarget.Injectable });\r\nHttpInterceptorHandler.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpInterceptorHandler });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpInterceptorHandler, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: HttpBackend }, { type: i0.EnvironmentInjector }]; } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Every request made through JSONP needs a callback name that's unique across the\r\n// whole page. Each request is assigned an id and the callback name is constructed\r\n// from that. The next id to be assigned is tracked in a global variable here that\r\n// is shared among all applications on the page.\r\nlet nextRequestId = 0;\r\n/**\r\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\r\n * executed.\r\n */\r\nlet foreignDocument;\r\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\r\n// passed in its URL.\r\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\r\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\r\n// have a request method JSONP.\r\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\r\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\r\n// Error text given when a request is passed to the JsonpClientBackend that has\r\n// headers set\r\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\r\n/**\r\n * DI token/abstract type representing a map of JSONP callbacks.\r\n *\r\n * In the browser, this should always be the `window` object.\r\n *\r\n *\r\n */\r\nclass JsonpCallbackContext {\r\n}\r\n/**\r\n * Factory function that determines where to store JSONP callbacks.\r\n *\r\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\r\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\r\n *\r\n *\r\n */\r\nfunction jsonpCallbackContext() {\r\n    if (typeof window === 'object') {\r\n        return window;\r\n    }\r\n    return {};\r\n}\r\n/**\r\n * Processes an `HttpRequest` with the JSONP method,\r\n * by performing JSONP style requests.\r\n * @see `HttpHandler`\r\n * @see `HttpXhrBackend`\r\n *\r\n * @publicApi\r\n */\r\nclass JsonpClientBackend {\r\n    constructor(callbackMap, document) {\r\n        this.callbackMap = callbackMap;\r\n        this.document = document;\r\n        /**\r\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\r\n         */\r\n        this.resolvedPromise = Promise.resolve();\r\n    }\r\n    /**\r\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\r\n     */\r\n    nextCallback() {\r\n        return `ng_jsonp_callback_${nextRequestId++}`;\r\n    }\r\n    /**\r\n     * Processes a JSONP request and returns an event stream of the results.\r\n     * @param req The request object.\r\n     * @returns An observable of the response events.\r\n     *\r\n     */\r\n    handle(req) {\r\n        // Firstly, check both the method and response type. If either doesn't match\r\n        // then the request was improperly routed here and cannot be handled.\r\n        if (req.method !== 'JSONP') {\r\n            throw new Error(JSONP_ERR_WRONG_METHOD);\r\n        }\r\n        else if (req.responseType !== 'json') {\r\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\r\n        }\r\n        // Check the request headers. JSONP doesn't support headers and\r\n        // cannot set any that were supplied.\r\n        if (req.headers.keys().length > 0) {\r\n            throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\r\n        }\r\n        // Everything else happens inside the Observable boundary.\r\n        return new Observable((observer) => {\r\n            // The first step to make a request is to generate the callback name, and replace the\r\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\r\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\r\n            const callback = this.nextCallback();\r\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\r\n            // Construct the <script> tag and point it at the URL.\r\n            const node = this.document.createElement('script');\r\n            node.src = url;\r\n            // A JSONP request requires waiting for multiple callbacks. These variables\r\n            // are closed over and track state across those callbacks.\r\n            // The response object, if one has been received, or null otherwise.\r\n            let body = null;\r\n            // Whether the response callback has been called.\r\n            let finished = false;\r\n            // Set the response callback in this.callbackMap (which will be the window\r\n            // object in the browser. The script being loaded via the <script> tag will\r\n            // eventually call this callback.\r\n            this.callbackMap[callback] = (data) => {\r\n                // Data has been received from the JSONP script. Firstly, delete this callback.\r\n                delete this.callbackMap[callback];\r\n                // Set state to indicate data was received.\r\n                body = data;\r\n                finished = true;\r\n            };\r\n            // cleanup() is a utility closure that removes the <script> from the page and\r\n            // the response callback from the window. This logic is used in both the\r\n            // success, error, and cancellation paths, so it's extracted out for convenience.\r\n            const cleanup = () => {\r\n                // Remove the <script> tag if it's still on the page.\r\n                if (node.parentNode) {\r\n                    node.parentNode.removeChild(node);\r\n                }\r\n                // Remove the response callback from the callbackMap (window object in the\r\n                // browser).\r\n                delete this.callbackMap[callback];\r\n            };\r\n            // onLoad() is the success callback which runs after the response callback\r\n            // if the JSONP script loads successfully. The event itself is unimportant.\r\n            // If something went wrong, onLoad() may run without the response callback\r\n            // having been invoked.\r\n            const onLoad = (event) => {\r\n                // We wrap it in an extra Promise, to ensure the microtask\r\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\r\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\r\n                this.resolvedPromise.then(() => {\r\n                    // Cleanup the page.\r\n                    cleanup();\r\n                    // Check whether the response callback has run.\r\n                    if (!finished) {\r\n                        // It hasn't, something went wrong with the request. Return an error via\r\n                        // the Observable error path. All JSONP errors have status 0.\r\n                        observer.error(new HttpErrorResponse({\r\n                            url,\r\n                            status: 0,\r\n                            statusText: 'JSONP Error',\r\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\r\n                        }));\r\n                        return;\r\n                    }\r\n                    // Success. body either contains the response body or null if none was\r\n                    // returned.\r\n                    observer.next(new HttpResponse({\r\n                        body,\r\n                        status: 200 /* HttpStatusCode.Ok */,\r\n                        statusText: 'OK',\r\n                        url,\r\n                    }));\r\n                    // Complete the stream, the response is over.\r\n                    observer.complete();\r\n                });\r\n            };\r\n            // onError() is the error callback, which runs if the script returned generates\r\n            // a Javascript error. It emits the error via the Observable error channel as\r\n            // a HttpErrorResponse.\r\n            const onError = (error) => {\r\n                cleanup();\r\n                // Wrap the error in a HttpErrorResponse.\r\n                observer.error(new HttpErrorResponse({\r\n                    error,\r\n                    status: 0,\r\n                    statusText: 'JSONP Error',\r\n                    url,\r\n                }));\r\n            };\r\n            // Subscribe to both the success (load) and error events on the <script> tag,\r\n            // and add it to the page.\r\n            node.addEventListener('load', onLoad);\r\n            node.addEventListener('error', onError);\r\n            this.document.body.appendChild(node);\r\n            // The request has now been successfully sent.\r\n            observer.next({ type: HttpEventType.Sent });\r\n            // Cancellation handler.\r\n            return () => {\r\n                if (!finished) {\r\n                    this.removeListeners(node);\r\n                }\r\n                // And finally, clean up the page.\r\n                cleanup();\r\n            };\r\n        });\r\n    }\r\n    removeListeners(script) {\r\n        // Issue #34818\r\n        // Changing <script>'s ownerDocument will prevent it from execution.\r\n        // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\r\n        if (!foreignDocument) {\r\n            foreignDocument = this.document.implementation.createHTMLDocument();\r\n        }\r\n        foreignDocument.adoptNode(script);\r\n    }\r\n}\r\nJsonpClientBackend.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: JsonpClientBackend, deps: [{ token: JsonpCallbackContext }, { token: DOCUMENT }], target: i0.ÉµÉµFactoryTarget.Injectable });\r\nJsonpClientBackend.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: JsonpClientBackend });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: JsonpClientBackend, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }]; } });\r\n/**\r\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\r\n */\r\nfunction jsonpInterceptorFn(req, next) {\r\n    if (req.method === 'JSONP') {\r\n        return inject(JsonpClientBackend).handle(req);\r\n    }\r\n    // Fall through for normal HTTP requests.\r\n    return next(req);\r\n}\r\n/**\r\n * Identifies requests with the method JSONP and\r\n * shifts them to the `JsonpClientBackend`.\r\n *\r\n * @see `HttpInterceptor`\r\n *\r\n * @publicApi\r\n */\r\nclass JsonpInterceptor {\r\n    constructor(injector) {\r\n        this.injector = injector;\r\n    }\r\n    /**\r\n     * Identifies and handles a given JSONP request.\r\n     * @param initialRequest The outgoing request object to handle.\r\n     * @param next The next interceptor in the chain, or the backend\r\n     * if no interceptors remain in the chain.\r\n     * @returns An observable of the event stream.\r\n     */\r\n    intercept(initialRequest, next) {\r\n        return this.injector.runInContext(() => jsonpInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\r\n    }\r\n}\r\nJsonpInterceptor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: JsonpInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ÉµÉµFactoryTarget.Injectable });\r\nJsonpInterceptor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: JsonpInterceptor });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: JsonpInterceptor, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: i0.EnvironmentInjector }]; } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\r\n/**\r\n * Determine an appropriate URL for the response, by checking either\r\n * XMLHttpRequest.responseURL or the X-Request-URL header.\r\n */\r\nfunction getResponseUrl(xhr) {\r\n    if ('responseURL' in xhr && xhr.responseURL) {\r\n        return xhr.responseURL;\r\n    }\r\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\r\n        return xhr.getResponseHeader('X-Request-URL');\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Uses `XMLHttpRequest` to send requests to a backend server.\r\n * @see `HttpHandler`\r\n * @see `JsonpClientBackend`\r\n *\r\n * @publicApi\r\n */\r\nclass HttpXhrBackend {\r\n    constructor(xhrFactory) {\r\n        this.xhrFactory = xhrFactory;\r\n    }\r\n    /**\r\n     * Processes a request and returns a stream of response events.\r\n     * @param req The request object.\r\n     * @returns An observable of the response events.\r\n     */\r\n    handle(req) {\r\n        // Quick check to give a better error message when a user attempts to use\r\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\r\n        if (req.method === 'JSONP') {\r\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\r\n        }\r\n        // Everything happens on Observable subscription.\r\n        return new Observable((observer) => {\r\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\r\n            const xhr = this.xhrFactory.build();\r\n            xhr.open(req.method, req.urlWithParams);\r\n            if (!!req.withCredentials) {\r\n                xhr.withCredentials = true;\r\n            }\r\n            // Add all the requested headers.\r\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\r\n            // Add an Accept header if one isn't present already.\r\n            if (!req.headers.has('Accept')) {\r\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\r\n            }\r\n            // Auto-detect the Content-Type header if one isn't present already.\r\n            if (!req.headers.has('Content-Type')) {\r\n                const detectedType = req.detectContentTypeHeader();\r\n                // Sometimes Content-Type detection fails.\r\n                if (detectedType !== null) {\r\n                    xhr.setRequestHeader('Content-Type', detectedType);\r\n                }\r\n            }\r\n            // Set the responseType if one was requested.\r\n            if (req.responseType) {\r\n                const responseType = req.responseType.toLowerCase();\r\n                // JSON responses need to be processed as text. This is because if the server\r\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\r\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\r\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\r\n                // is parsed by first requesting text and then applying JSON.parse.\r\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\r\n            }\r\n            // Serialize the request body if one is present. If not, this will be set to null.\r\n            const reqBody = req.serializeBody();\r\n            // If progress events are enabled, response headers will be delivered\r\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\r\n            // event. However, since response headers don't change in between these\r\n            // two events, it doesn't make sense to parse them twice. So headerResponse\r\n            // caches the data extracted from the response whenever it's first parsed,\r\n            // to ensure parsing isn't duplicated.\r\n            let headerResponse = null;\r\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\r\n            // state, and memoizes it into headerResponse.\r\n            const partialFromXhr = () => {\r\n                if (headerResponse !== null) {\r\n                    return headerResponse;\r\n                }\r\n                const statusText = xhr.statusText || 'OK';\r\n                // Parse headers from XMLHttpRequest - this step is lazy.\r\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\r\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\r\n                // request URL.\r\n                const url = getResponseUrl(xhr) || req.url;\r\n                // Construct the HttpHeaderResponse and memoize it.\r\n                headerResponse = new HttpHeaderResponse({ headers, status: xhr.status, statusText, url });\r\n                return headerResponse;\r\n            };\r\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\r\n            // emit. This allows them to be unregistered as event listeners later.\r\n            // First up is the load event, which represents a response being fully available.\r\n            const onLoad = () => {\r\n                // Read response state from the memoized partial data.\r\n                let { headers, status, statusText, url } = partialFromXhr();\r\n                // The body will be read out if present.\r\n                let body = null;\r\n                if (status !== 204 /* HttpStatusCode.NoContent */) {\r\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\r\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\r\n                }\r\n                // Normalize another potential bug (this one comes from CORS).\r\n                if (status === 0) {\r\n                    status = !!body ? 200 /* HttpStatusCode.Ok */ : 0;\r\n                }\r\n                // ok determines whether the response will be transmitted on the event or\r\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\r\n                // but a successful status code can still result in an error if the user\r\n                // asked for JSON data and the body cannot be parsed as such.\r\n                let ok = status >= 200 && status < 300;\r\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\r\n                // will have done that already).\r\n                if (req.responseType === 'json' && typeof body === 'string') {\r\n                    // Save the original body, before attempting XSSI prefix stripping.\r\n                    const originalBody = body;\r\n                    body = body.replace(XSSI_PREFIX, '');\r\n                    try {\r\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\r\n                        body = body !== '' ? JSON.parse(body) : null;\r\n                    }\r\n                    catch (error) {\r\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\r\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\r\n                        // a better error response.\r\n                        body = originalBody;\r\n                        // If this was an error request to begin with, leave it as a string, it probably\r\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\r\n                        if (ok) {\r\n                            // Even though the response status was 2xx, this is still an error.\r\n                            ok = false;\r\n                            // The parse error contains the text of the body that failed to parse.\r\n                            body = { error, text: body };\r\n                        }\r\n                    }\r\n                }\r\n                if (ok) {\r\n                    // A successful response is delivered on the event stream.\r\n                    observer.next(new HttpResponse({\r\n                        body,\r\n                        headers,\r\n                        status,\r\n                        statusText,\r\n                        url: url || undefined,\r\n                    }));\r\n                    // The full body has been received and delivered, no further events\r\n                    // are possible. This request is complete.\r\n                    observer.complete();\r\n                }\r\n                else {\r\n                    // An unsuccessful request is delivered on the error channel.\r\n                    observer.error(new HttpErrorResponse({\r\n                        // The error in this case is the response body (error from the server).\r\n                        error: body,\r\n                        headers,\r\n                        status,\r\n                        statusText,\r\n                        url: url || undefined,\r\n                    }));\r\n                }\r\n            };\r\n            // The onError callback is called when something goes wrong at the network level.\r\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\r\n            // transmitted on the error channel.\r\n            const onError = (error) => {\r\n                const { url } = partialFromXhr();\r\n                const res = new HttpErrorResponse({\r\n                    error,\r\n                    status: xhr.status || 0,\r\n                    statusText: xhr.statusText || 'Unknown Error',\r\n                    url: url || undefined,\r\n                });\r\n                observer.error(res);\r\n            };\r\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\r\n            // has been sent on the stream. This is necessary to track if progress\r\n            // is enabled since the event will be sent on only the first download\r\n            // progress event.\r\n            let sentHeaders = false;\r\n            // The download progress event handler, which is only registered if\r\n            // progress events are enabled.\r\n            const onDownProgress = (event) => {\r\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\r\n                if (!sentHeaders) {\r\n                    observer.next(partialFromXhr());\r\n                    sentHeaders = true;\r\n                }\r\n                // Start building the download progress event to deliver on the response\r\n                // event stream.\r\n                let progressEvent = {\r\n                    type: HttpEventType.DownloadProgress,\r\n                    loaded: event.loaded,\r\n                };\r\n                // Set the total number of bytes in the event if it's available.\r\n                if (event.lengthComputable) {\r\n                    progressEvent.total = event.total;\r\n                }\r\n                // If the request was for text content and a partial response is\r\n                // available on XMLHttpRequest, include it in the progress event\r\n                // to allow for streaming reads.\r\n                if (req.responseType === 'text' && !!xhr.responseText) {\r\n                    progressEvent.partialText = xhr.responseText;\r\n                }\r\n                // Finally, fire the event.\r\n                observer.next(progressEvent);\r\n            };\r\n            // The upload progress event handler, which is only registered if\r\n            // progress events are enabled.\r\n            const onUpProgress = (event) => {\r\n                // Upload progress events are simpler. Begin building the progress\r\n                // event.\r\n                let progress = {\r\n                    type: HttpEventType.UploadProgress,\r\n                    loaded: event.loaded,\r\n                };\r\n                // If the total number of bytes being uploaded is available, include\r\n                // it.\r\n                if (event.lengthComputable) {\r\n                    progress.total = event.total;\r\n                }\r\n                // Send the event.\r\n                observer.next(progress);\r\n            };\r\n            // By default, register for load and error events.\r\n            xhr.addEventListener('load', onLoad);\r\n            xhr.addEventListener('error', onError);\r\n            xhr.addEventListener('timeout', onError);\r\n            xhr.addEventListener('abort', onError);\r\n            // Progress events are only enabled if requested.\r\n            if (req.reportProgress) {\r\n                // Download progress is always enabled if requested.\r\n                xhr.addEventListener('progress', onDownProgress);\r\n                // Upload progress depends on whether there is a body to upload.\r\n                if (reqBody !== null && xhr.upload) {\r\n                    xhr.upload.addEventListener('progress', onUpProgress);\r\n                }\r\n            }\r\n            // Fire the request, and notify the event stream that it was fired.\r\n            xhr.send(reqBody);\r\n            observer.next({ type: HttpEventType.Sent });\r\n            // This is the return from the Observable function, which is the\r\n            // request cancellation handler.\r\n            return () => {\r\n                // On a cancellation, remove all registered event listeners.\r\n                xhr.removeEventListener('error', onError);\r\n                xhr.removeEventListener('abort', onError);\r\n                xhr.removeEventListener('load', onLoad);\r\n                xhr.removeEventListener('timeout', onError);\r\n                if (req.reportProgress) {\r\n                    xhr.removeEventListener('progress', onDownProgress);\r\n                    if (reqBody !== null && xhr.upload) {\r\n                        xhr.upload.removeEventListener('progress', onUpProgress);\r\n                    }\r\n                }\r\n                // Finally, abort the in-flight request.\r\n                if (xhr.readyState !== xhr.DONE) {\r\n                    xhr.abort();\r\n                }\r\n            };\r\n        });\r\n    }\r\n}\r\nHttpXhrBackend.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpXhrBackend, deps: [{ token: i1.XhrFactory }], target: i0.ÉµÉµFactoryTarget.Injectable });\r\nHttpXhrBackend.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpXhrBackend });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpXhrBackend, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: i1.XhrFactory }]; } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst XSRF_ENABLED = new InjectionToken('XSRF_ENABLED');\r\nconst XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\r\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME', {\r\n    providedIn: 'root',\r\n    factory: () => XSRF_DEFAULT_COOKIE_NAME,\r\n});\r\nconst XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\r\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME', {\r\n    providedIn: 'root',\r\n    factory: () => XSRF_DEFAULT_HEADER_NAME,\r\n});\r\n/**\r\n * Retrieves the current XSRF token to use with the next outgoing request.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpXsrfTokenExtractor {\r\n}\r\n/**\r\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\r\n */\r\nclass HttpXsrfCookieExtractor {\r\n    constructor(doc, platform, cookieName) {\r\n        this.doc = doc;\r\n        this.platform = platform;\r\n        this.cookieName = cookieName;\r\n        this.lastCookieString = '';\r\n        this.lastToken = null;\r\n        /**\r\n         * @internal for testing\r\n         */\r\n        this.parseCount = 0;\r\n    }\r\n    getToken() {\r\n        if (this.platform === 'server') {\r\n            return null;\r\n        }\r\n        const cookieString = this.doc.cookie || '';\r\n        if (cookieString !== this.lastCookieString) {\r\n            this.parseCount++;\r\n            this.lastToken = ÉµparseCookieValue(cookieString, this.cookieName);\r\n            this.lastCookieString = cookieString;\r\n        }\r\n        return this.lastToken;\r\n    }\r\n}\r\nHttpXsrfCookieExtractor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpXsrfCookieExtractor, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: XSRF_COOKIE_NAME }], target: i0.ÉµÉµFactoryTarget.Injectable });\r\nHttpXsrfCookieExtractor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpXsrfCookieExtractor });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpXsrfCookieExtractor, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [PLATFORM_ID]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [XSRF_COOKIE_NAME]\r\n                }] }]; } });\r\nfunction xsrfInterceptorFn(req, next) {\r\n    const lcUrl = req.url.toLowerCase();\r\n    // Skip both non-mutating requests and absolute URLs.\r\n    // Non-mutating requests don't require a token, and absolute URLs require special handling\r\n    // anyway as the cookie set\r\n    // on our origin is not the same as the token expected by another origin.\r\n    if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' ||\r\n        lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\r\n        return next(req);\r\n    }\r\n    const token = inject(HttpXsrfTokenExtractor).getToken();\r\n    const headerName = inject(XSRF_HEADER_NAME);\r\n    // Be careful not to overwrite an existing header of the same name.\r\n    if (token != null && !req.headers.has(headerName)) {\r\n        req = req.clone({ headers: req.headers.set(headerName, token) });\r\n    }\r\n    return next(req);\r\n}\r\n/**\r\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\r\n */\r\nclass HttpXsrfInterceptor {\r\n    constructor(injector) {\r\n        this.injector = injector;\r\n    }\r\n    intercept(initialRequest, next) {\r\n        return this.injector.runInContext(() => xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\r\n    }\r\n}\r\nHttpXsrfInterceptor.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpXsrfInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ÉµÉµFactoryTarget.Injectable });\r\nHttpXsrfInterceptor.Éµprov = i0.ÉµÉµngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpXsrfInterceptor });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpXsrfInterceptor, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: i0.EnvironmentInjector }]; } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Identifies a particular kind of `HttpFeature`.\r\n *\r\n * @publicApi\r\n */\r\nvar HttpFeatureKind;\r\n(function (HttpFeatureKind) {\r\n    HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\r\n    HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\r\n    HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\r\n    HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\r\n    HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\r\n    HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\r\n})(HttpFeatureKind || (HttpFeatureKind = {}));\r\nfunction makeHttpFeature(kind, providers) {\r\n    return {\r\n        Éµkind: kind,\r\n        Éµproviders: providers,\r\n    };\r\n}\r\n/**\r\n * Configures Angular's `HttpClient` service to be available for injection.\r\n *\r\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\r\n * protection of outgoing requests. Additional configuration options can be provided by passing\r\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\r\n * `withInterceptors(...)` feature.\r\n *\r\n * @see withInterceptors\r\n * @see withInterceptorsFromDi\r\n * @see withXsrfConfiguration\r\n * @see withNoXsrfProtection\r\n * @see withJsonpSupport\r\n * @see withRequestsMadeViaParent\r\n */\r\nfunction provideHttpClient(...features) {\r\n    if (ngDevMode) {\r\n        const featureKinds = new Set(features.map(f => f.Éµkind));\r\n        if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\r\n            featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\r\n            throw new Error(ngDevMode ?\r\n                `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` :\r\n                '');\r\n        }\r\n    }\r\n    const providers = [\r\n        HttpClient,\r\n        HttpXhrBackend,\r\n        HttpInterceptorHandler,\r\n        { provide: HttpHandler, useExisting: HttpInterceptorHandler },\r\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\r\n        {\r\n            provide: HTTP_INTERCEPTOR_FNS,\r\n            useValue: xsrfInterceptorFn,\r\n            multi: true,\r\n        },\r\n        { provide: XSRF_ENABLED, useValue: true },\r\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\r\n    ];\r\n    for (const feature of features) {\r\n        providers.push(...feature.Éµproviders);\r\n    }\r\n    return makeEnvironmentProviders(providers);\r\n}\r\n/**\r\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\r\n * instance.\r\n *\r\n * @see HttpInterceptorFn\r\n * @see provideHttpClient\r\n * @publicApi\r\n */\r\nfunction withInterceptors(interceptorFns) {\r\n    return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\r\n        return {\r\n            provide: HTTP_INTERCEPTOR_FNS,\r\n            useValue: interceptorFn,\r\n            multi: true,\r\n        };\r\n    }));\r\n}\r\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken('LEGACY_INTERCEPTOR_FN');\r\n/**\r\n * Includes class-based interceptors configured using a multi-provider in the current injector into\r\n * the configured `HttpClient` instance.\r\n *\r\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\r\n * interceptors may be phased out in a later release.\r\n *\r\n * @see HttpInterceptor\r\n * @see HTTP_INTERCEPTORS\r\n * @see provideHttpClient\r\n */\r\nfunction withInterceptorsFromDi() {\r\n    // Note: the legacy interceptor function is provided here via an intermediate token\r\n    // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\r\n    // included multiple times, all of the multi-provider entries will have the same instance of the\r\n    // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\r\n    // interceptors will not run multiple times.\r\n    return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\r\n        {\r\n            provide: LEGACY_INTERCEPTOR_FN,\r\n            useFactory: legacyInterceptorFnFactory,\r\n        },\r\n        {\r\n            provide: HTTP_INTERCEPTOR_FNS,\r\n            useExisting: LEGACY_INTERCEPTOR_FN,\r\n            multi: true,\r\n        }\r\n    ]);\r\n}\r\n/**\r\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\r\n *\r\n * This feature is incompatible with the `withNoXsrfProtection` feature.\r\n *\r\n * @see provideHttpClient\r\n */\r\nfunction withXsrfConfiguration({ cookieName, headerName }) {\r\n    const providers = [];\r\n    if (cookieName !== undefined) {\r\n        providers.push({ provide: XSRF_COOKIE_NAME, useValue: cookieName });\r\n    }\r\n    if (headerName !== undefined) {\r\n        providers.push({ provide: XSRF_HEADER_NAME, useValue: headerName });\r\n    }\r\n    return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\r\n}\r\n/**\r\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\r\n *\r\n * This feature is incompatible with the `withXsrfConfiguration` feature.\r\n *\r\n * @see provideHttpClient\r\n */\r\nfunction withNoXsrfProtection() {\r\n    return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\r\n        {\r\n            provide: XSRF_ENABLED,\r\n            useValue: false,\r\n        },\r\n    ]);\r\n}\r\n/**\r\n * Add JSONP support to the configuration of the current `HttpClient` instance.\r\n *\r\n * @see provideHttpClient\r\n */\r\nfunction withJsonpSupport() {\r\n    return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\r\n        JsonpClientBackend,\r\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\r\n        { provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true },\r\n    ]);\r\n}\r\n/**\r\n * Configures the current `HttpClient` instance to make requests via the parent injector's\r\n * `HttpClient` instead of directly.\r\n *\r\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\r\n * instance. For example, even if `HttpClient` is configured in the parent injector with\r\n * one or more interceptors, they will not intercept requests made via this instance.\r\n *\r\n * With this option enabled, once the request has passed through the current injector's\r\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\r\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\r\n *\r\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\r\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\r\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\r\n * this option.\r\n *\r\n * @see provideHttpClient\r\n * @developerPreview\r\n */\r\nfunction withRequestsMadeViaParent() {\r\n    return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\r\n        {\r\n            provide: HttpBackend,\r\n            useFactory: () => {\r\n                const handlerFromParent = inject(HttpHandler, { skipSelf: true, optional: true });\r\n                if (ngDevMode && handlerFromParent === null) {\r\n                    throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\r\n                }\r\n                return handlerFromParent;\r\n            },\r\n        },\r\n    ]);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Configures XSRF protection support for outgoing requests.\r\n *\r\n * For a server that supports a cookie-based XSRF protection system,\r\n * use directly to configure XSRF protection with the correct\r\n * cookie and header names.\r\n *\r\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\r\n * and the default header name is `X-XSRF-TOKEN`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClientXsrfModule {\r\n    /**\r\n     * Disable the default XSRF protection.\r\n     */\r\n    static disable() {\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: [\r\n                withNoXsrfProtection().Éµproviders,\r\n            ],\r\n        };\r\n    }\r\n    /**\r\n     * Configure XSRF protection.\r\n     * @param options An object that can specify either or both\r\n     * cookie name or header name.\r\n     * - Cookie name default is `XSRF-TOKEN`.\r\n     * - Header name default is `X-XSRF-TOKEN`.\r\n     *\r\n     */\r\n    static withOptions(options = {}) {\r\n        return {\r\n            ngModule: HttpClientXsrfModule,\r\n            providers: withXsrfConfiguration(options).Éµproviders,\r\n        };\r\n    }\r\n}\r\nHttpClientXsrfModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpClientXsrfModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\r\nHttpClientXsrfModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpClientXsrfModule });\r\nHttpClientXsrfModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpClientXsrfModule, providers: [\r\n        HttpXsrfInterceptor,\r\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\r\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\r\n        withXsrfConfiguration({\r\n            cookieName: XSRF_DEFAULT_COOKIE_NAME,\r\n            headerName: XSRF_DEFAULT_HEADER_NAME,\r\n        }).Éµproviders,\r\n        { provide: XSRF_ENABLED, useValue: true },\r\n    ] });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpClientXsrfModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    providers: [\r\n                        HttpXsrfInterceptor,\r\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\r\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\r\n                        withXsrfConfiguration({\r\n                            cookieName: XSRF_DEFAULT_COOKIE_NAME,\r\n                            headerName: XSRF_DEFAULT_HEADER_NAME,\r\n                        }).Éµproviders,\r\n                        { provide: XSRF_ENABLED, useValue: true },\r\n                    ],\r\n                }]\r\n        }] });\r\n/**\r\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\r\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\r\n *\r\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\r\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClientModule {\r\n}\r\nHttpClientModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpClientModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\r\nHttpClientModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpClientModule });\r\nHttpClientModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpClientModule, providers: [\r\n        provideHttpClient(withInterceptorsFromDi(), withXsrfConfiguration({\r\n            cookieName: XSRF_DEFAULT_COOKIE_NAME,\r\n            headerName: XSRF_DEFAULT_HEADER_NAME,\r\n        })),\r\n    ] });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpClientModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    /**\r\n                     * Configures the [dependency injector](guide/glossary#injector) where it is imported\r\n                     * with supporting services for HTTP communications.\r\n                     */\r\n                    providers: [\r\n                        provideHttpClient(withInterceptorsFromDi(), withXsrfConfiguration({\r\n                            cookieName: XSRF_DEFAULT_COOKIE_NAME,\r\n                            headerName: XSRF_DEFAULT_HEADER_NAME,\r\n                        })),\r\n                    ],\r\n                }]\r\n        }] });\r\n/**\r\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\r\n * with supporting services for JSONP.\r\n * Without this module, Jsonp requests reach the backend\r\n * with method JSONP, where they are rejected.\r\n *\r\n * @publicApi\r\n */\r\nclass HttpClientJsonpModule {\r\n}\r\nHttpClientJsonpModule.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpClientJsonpModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\r\nHttpClientJsonpModule.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpClientJsonpModule });\r\nHttpClientJsonpModule.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpClientJsonpModule, providers: [\r\n        withJsonpSupport().Éµproviders,\r\n    ] });\r\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: HttpClientJsonpModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    providers: [\r\n                        withJsonpSupport().Éµproviders,\r\n                    ],\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * A wrapper around the `XMLHttpRequest` constructor.\r\n *\r\n * @publicApi\r\n * @see `XhrFactory`\r\n * @deprecated\r\n * `XhrFactory` has moved, please import `XhrFactory` from `@angular/common` instead.\r\n */\r\nconst XhrFactory = XhrFactory$1;\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, provideHttpClient, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration, HttpInterceptorHandler as ÉµHttpInterceptingHandler, HttpInterceptorHandler as ÉµHttpInterceptorHandler };\r\n\n"],"mappings":"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CAAC9C,GAAG,CAACuC,MAAM,CAACG,MAAM,CAACwB,KAAK,CAAC;cACjC;YACJ,CAAC,MACI;cACD,IAAI,CAAClE,GAAG,CAACuC,MAAM,CAACG,MAAM,CAACwB,KAAK,CAAC;cAC7B;YACJ;QAAC;MAEb,CAAC,CAAC;MACF,IAAI,CAACc,SAAS,GAAG,IAAI,CAACD,OAAO,GAAG,IAAI;IACxC;EACJ;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMa,gBAAgB,CAAC;EACnBxF,WAAW,CAACyF,YAAY,EAAE;IACtB,IAAI,CAACA,YAAY,GAAGA,YAAY;EACpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,CAAC;EACd1F,WAAW,GAAG;IACV,IAAI,CAACJ,GAAG,GAAG,IAAIO,GAAG,EAAE;EACxB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIkB,GAAG,CAACsE,KAAK,EAAE5E,KAAK,EAAE;IACd,IAAI,CAACnB,GAAG,CAACyB,GAAG,CAACsE,KAAK,EAAE5E,KAAK,CAAC;IAC1B,OAAO,IAAI;EACf;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACII,GAAG,CAACwE,KAAK,EAAE;IACP,IAAI,CAAC,IAAI,CAAC/F,GAAG,CAACsB,GAAG,CAACyE,KAAK,CAAC,EAAE;MACtB,IAAI,CAAC/F,GAAG,CAACyB,GAAG,CAACsE,KAAK,EAAEA,KAAK,CAACF,YAAY,EAAE,CAAC;IAC7C;IACA,OAAO,IAAI,CAAC7F,GAAG,CAACuB,GAAG,CAACwE,KAAK,CAAC;EAC9B;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIxD,MAAM,CAACwD,KAAK,EAAE;IACV,IAAI,CAAC/F,GAAG,CAACuC,MAAM,CAACwD,KAAK,CAAC;I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"},"metadata":{},"sourceType":"module","externalDependencies":[]}